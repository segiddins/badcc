Program {
    declarations: [
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "a",
                    ty: Int,
                    init: Constant(10),
                },
                VariableDeclaration {
                    name: "b",
                    ty: Int,
                    init: Constant(12),
                },
                Expression(
                    CompoundAssignment {
                        op: Add,
                        lhs: Var("a"),
                        rhs: Binary {
                            op: Or,
                            lhs: Constant(0),
                            rhs: Var("b"),
                        },
                    },
                ),
                Expression(
                    CompoundAssignment {
                        op: Multiply,
                        lhs: Var("b"),
                        rhs: Binary {
                            op: And,
                            lhs: Var("a"),
                            rhs: Constant(0),
                        },
                    },
                ),
                VariableDeclaration {
                    name: "c",
                    ty: Int,
                    init: Constant(14),
                },
                Expression(
                    CompoundAssignment {
                        op: Subtract,
                        lhs: Var("c"),
                        rhs: Binary {
                            op: Or,
                            lhs: Var("a"),
                            rhs: Var("b"),
                        },
                    },
                ),
                VariableDeclaration {
                    name: "d",
                    ty: Int,
                    init: Constant(16),
                },
                Expression(
                    CompoundAssignment {
                        op: Divide,
                        lhs: Var("d"),
                        rhs: Binary {
                            op: Or,
                            lhs: Var("c"),
                            rhs: Var("d"),
                        },
                    },
                ),
                Return(
                    Binary {
                        op: And,
                        lhs: Binary {
                            op: And,
                            lhs: Binary {
                                op: And,
                                lhs: Binary {
                                    op: Equals,
                                    lhs: Var("a"),
                                    rhs: Constant(11),
                                },
                                rhs: Binary {
                                    op: Equals,
                                    lhs: Var("b"),
                                    rhs: Constant(0),
                                },
                            },
                            rhs: Binary {
                                op: Equals,
                                lhs: Var("c"),
                                rhs: Constant(13),
                            },
                        },
                        rhs: Binary {
                            op: Equals,
                            lhs: Var("d"),
                            rhs: Constant(16),
                        },
                    },
                ),
            ],
        },
    ],
}