Program {
    declarations: [
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "a",
                    ty: Int,
                    init: Constant {
                        constant: 0,
                    },
                },
                VariableDeclaration {
                    name: "b",
                    ty: Int,
                    init: Constant {
                        constant: 0,
                    },
                },
                Expression(
                    Unary {
                        op: PostfixIncrement,
                        expr: Var {
                            name: "a",
                        },
                    },
                ),
                Expression(
                    Unary {
                        op: PrefixIncrement,
                        expr: Var {
                            name: "a",
                        },
                    },
                ),
                Expression(
                    Unary {
                        op: PrefixIncrement,
                        expr: Var {
                            name: "a",
                        },
                    },
                ),
                Expression(
                    Unary {
                        op: PostfixDecrement,
                        expr: Var {
                            name: "b",
                        },
                    },
                ),
                Expression(
                    Unary {
                        op: PrefixDecrement,
                        expr: Var {
                            name: "b",
                        },
                    },
                ),
                Return(
                    Binary {
                        op: And,
                        lhs: Binary {
                            op: Equals,
                            lhs: Var {
                                name: "a",
                            },
                            rhs: Constant {
                                constant: 3,
                            },
                        },
                        rhs: Binary {
                            op: Equals,
                            lhs: Var {
                                name: "b",
                            },
                            rhs: Unary {
                                op: Minus,
                                expr: Constant {
                                    constant: 2,
                                },
                            },
                        },
                    },
                ),
            ],
        },
    ],
}