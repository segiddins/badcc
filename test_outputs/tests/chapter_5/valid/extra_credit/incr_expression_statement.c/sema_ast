Program {
    declarations: [
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "a.1",
                    ty: Int,
                    init: Constant(0),
                },
                VariableDeclaration {
                    name: "b.2",
                    ty: Int,
                    init: Constant(0),
                },
                Expression(
                    Unary {
                        op: PostfixIncrement,
                        expr: Var("a.1"),
                    },
                ),
                Expression(
                    Unary {
                        op: PrefixIncrement,
                        expr: Var("a.1"),
                    },
                ),
                Expression(
                    Unary {
                        op: PrefixIncrement,
                        expr: Var("a.1"),
                    },
                ),
                Expression(
                    Unary {
                        op: PostfixDecrement,
                        expr: Var("b.2"),
                    },
                ),
                Expression(
                    Unary {
                        op: PrefixDecrement,
                        expr: Var("b.2"),
                    },
                ),
                Return(
                    Binary {
                        op: And,
                        lhs: Binary {
                            op: Equals,
                            lhs: Var("a.1"),
                            rhs: Constant(3),
                        },
                        rhs: Binary {
                            op: Equals,
                            lhs: Var("b.2"),
                            rhs: Unary {
                                op: Minus,
                                expr: Constant(2),
                            },
                        },
                    },
                ),
            ],
        },
    ],
}