Program {
    static_variables: [],
    functions: [
        Function {
            identifier: "main",
            global: true,
            params: [],
            instructions: [
                Copy {
                    src: 37,
                    dst: Var("count.1", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("count.1", Int),
                    rhs: 4,
                    dst: Var("main.tmp.0", Int),
                },
                Binary {
                    op: Divide,
                    lhs: Var("main.tmp.0", Int),
                    rhs: 5,
                    dst: Var("main.tmp.1", Int),
                },
                Copy {
                    src: Var("main.tmp.1", Int),
                    dst: Var("iterations.2", Int),
                },
                Binary {
                    op: Remainder,
                    lhs: Var("count.1", Int),
                    rhs: 5,
                    dst: Var("main.tmp.2", Int),
                },
                Jump(
                    "switch.0.cases",
                ),
                Label(
                    "switch.0.0",
                ),
                Label(
                    "loop.1.head",
                ),
                Binary {
                    op: Subtract,
                    lhs: Var("count.1", Int),
                    rhs: 1,
                    dst: Var("main.tmp.4", Int),
                },
                Copy {
                    src: Var("main.tmp.4", Int),
                    dst: Var("count.1", Int),
                },
                Label(
                    "switch.0.4",
                ),
                Binary {
                    op: Subtract,
                    lhs: Var("count.1", Int),
                    rhs: 1,
                    dst: Var("main.tmp.5", Int),
                },
                Copy {
                    src: Var("main.tmp.5", Int),
                    dst: Var("count.1", Int),
                },
                Label(
                    "switch.0.3",
                ),
                Binary {
                    op: Subtract,
                    lhs: Var("count.1", Int),
                    rhs: 1,
                    dst: Var("main.tmp.6", Int),
                },
                Copy {
                    src: Var("main.tmp.6", Int),
                    dst: Var("count.1", Int),
                },
                Label(
                    "switch.0.2",
                ),
                Binary {
                    op: Subtract,
                    lhs: Var("count.1", Int),
                    rhs: 1,
                    dst: Var("main.tmp.7", Int),
                },
                Copy {
                    src: Var("main.tmp.7", Int),
                    dst: Var("count.1", Int),
                },
                Label(
                    "switch.0.1",
                ),
                Binary {
                    op: Subtract,
                    lhs: Var("count.1", Int),
                    rhs: 1,
                    dst: Var("main.tmp.8", Int),
                },
                Copy {
                    src: Var("main.tmp.8", Int),
                    dst: Var("count.1", Int),
                },
                Label(
                    "loop.1.start",
                ),
                Binary {
                    op: Subtract,
                    lhs: Var("iterations.2", Int),
                    rhs: 1,
                    dst: Var("main.tmp.9", Int),
                },
                Copy {
                    src: Var("main.tmp.9", Int),
                    dst: Var("iterations.2", Int),
                },
                Binary {
                    op: GreaterThan,
                    lhs: Var("iterations.2", Int),
                    rhs: 0,
                    dst: Var("main.tmp.10", Int),
                },
                JumpIfNotZero(
                    Var("main.tmp.10", Int),
                    "loop.1.head",
                ),
                Label(
                    "loop.1",
                ),
                Jump(
                    "switch.0",
                ),
                Label(
                    "switch.0.cases",
                ),
                Binary {
                    op: Equals,
                    lhs: 0,
                    rhs: Var("main.tmp.2", Int),
                    dst: Var("main.tmp.3", Int),
                },
                JumpIfNotZero(
                    Var("main.tmp.3", Int),
                    "switch.0.0",
                ),
                Binary {
                    op: Equals,
                    lhs: 4,
                    rhs: Var("main.tmp.2", Int),
                    dst: Var("main.tmp.3", Int),
                },
                JumpIfNotZero(
                    Var("main.tmp.3", Int),
                    "switch.0.4",
                ),
                Binary {
                    op: Equals,
                    lhs: 3,
                    rhs: Var("main.tmp.2", Int),
                    dst: Var("main.tmp.3", Int),
                },
                JumpIfNotZero(
                    Var("main.tmp.3", Int),
                    "switch.0.3",
                ),
                Binary {
                    op: Equals,
                    lhs: 2,
                    rhs: Var("main.tmp.2", Int),
                    dst: Var("main.tmp.3", Int),
                },
                JumpIfNotZero(
                    Var("main.tmp.3", Int),
                    "switch.0.2",
                ),
                Binary {
                    op: Equals,
                    lhs: 1,
                    rhs: Var("main.tmp.2", Int),
                    dst: Var("main.tmp.3", Int),
                },
                JumpIfNotZero(
                    Var("main.tmp.3", Int),
                    "switch.0.1",
                ),
                Label(
                    "switch.0",
                ),
                Binary {
                    op: Equals,
                    lhs: Var("count.1", Int),
                    rhs: 0,
                    dst: Var("main.tmp.12", Int),
                },
                JumpIfZero(
                    Var("main.tmp.12", Int),
                    "main.0.false",
                ),
                Binary {
                    op: Equals,
                    lhs: Var("iterations.2", Int),
                    rhs: 0,
                    dst: Var("main.tmp.13", Int),
                },
                JumpIfZero(
                    Var("main.tmp.13", Int),
                    "main.0.false",
                ),
                Copy {
                    src: 1,
                    dst: Var("main.tmp.11", Int),
                },
                Jump(
                    "main.0.end",
                ),
                Label(
                    "main.0.false",
                ),
                Copy {
                    src: 0,
                    dst: Var("main.tmp.11", Int),
                },
                Label(
                    "main.0.end",
                ),
                Return(
                    Var("main.tmp.11", Int),
                ),
                Return(
                    0,
                ),
            ],
        },
    ],
}