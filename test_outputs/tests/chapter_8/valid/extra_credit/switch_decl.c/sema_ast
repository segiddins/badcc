Program {
    declarations: [
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "a.1",
                    ty: Int,
                    init: Constant(3),
                },
                VariableDeclaration {
                    name: "b.2",
                    ty: Int,
                    init: Constant(0),
                },
                Switch(
                    Var("a.1"),
                    Compound(
                        [
                            VariableDeclaration {
                                name: "a.3",
                                ty: Int,
                                init: Assignment {
                                    lhs: Var("b.2"),
                                    rhs: Constant(5),
                                },
                            },
                            Case {
                                expression: Constant(3),
                                statement: Expression(
                                    Assignment {
                                        lhs: Var("a.3"),
                                        rhs: Constant(4),
                                    },
                                ),
                                label: "switch.0",
                            },
                            Expression(
                                Assignment {
                                    lhs: Var("b.2"),
                                    rhs: Binary {
                                        op: Add,
                                        lhs: Var("b.2"),
                                        rhs: Var("a.3"),
                                    },
                                },
                            ),
                        ],
                    ),
                    Some(
                        "switch.0",
                    ),
                ),
                Return(
                    Binary {
                        op: And,
                        lhs: Binary {
                            op: Equals,
                            lhs: Var("a.1"),
                            rhs: Constant(3),
                        },
                        rhs: Binary {
                            op: Equals,
                            lhs: Var("b.2"),
                            rhs: Constant(4),
                        },
                    },
                ),
            ],
        },
    ],
}