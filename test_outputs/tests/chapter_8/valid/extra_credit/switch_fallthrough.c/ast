Program {
    declarations: [
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "a",
                    ty: Int,
                    init: Constant(
                        4,
                    ),
                },
                VariableDeclaration {
                    name: "b",
                    ty: Int,
                    init: Constant(
                        9,
                    ),
                },
                VariableDeclaration {
                    name: "c",
                    ty: Int,
                    init: Constant(
                        0,
                    ),
                },
                Switch(
                    Ternary(
                        Var(
                            "a",
                        ),
                        Var(
                            "b",
                        ),
                        Constant(
                            7,
                        ),
                    ),
                    Compound(
                        [
                            Case(
                                Constant(
                                    0,
                                ),
                                Return(
                                    Constant(
                                        5,
                                    ),
                                ),
                                None,
                            ),
                            Case(
                                Constant(
                                    7,
                                ),
                                Expression(
                                    Assignment(
                                        Var(
                                            "c",
                                        ),
                                        Constant(
                                            1,
                                        ),
                                    ),
                                ),
                                None,
                            ),
                            Case(
                                Constant(
                                    9,
                                ),
                                Expression(
                                    Assignment(
                                        Var(
                                            "c",
                                        ),
                                        Constant(
                                            2,
                                        ),
                                    ),
                                ),
                                None,
                            ),
                            Case(
                                Constant(
                                    1,
                                ),
                                Expression(
                                    Assignment(
                                        Var(
                                            "c",
                                        ),
                                        Binary(
                                            Add,
                                            Var(
                                                "c",
                                            ),
                                            Constant(
                                                4,
                                            ),
                                        ),
                                    ),
                                ),
                                None,
                            ),
                        ],
                    ),
                    None,
                ),
                Return(
                    Var(
                        "c",
                    ),
                ),
            ],
        },
    ],
}