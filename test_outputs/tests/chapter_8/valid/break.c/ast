Program {
    declarations: [
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "a",
                    ty: Int,
                    init: Constant(
                        10,
                    ),
                },
                VariableDeclaration {
                    name: "b",
                    ty: Int,
                    init: Constant(
                        20,
                    ),
                },
                For {
                    init: Some(
                        Assignment(
                            Var(
                                "b",
                            ),
                            Unary(
                                Minus,
                                Constant(
                                    20,
                                ),
                            ),
                        ),
                    ),
                    condition: Some(
                        Binary(
                            LessThan,
                            Var(
                                "b",
                            ),
                            Constant(
                                0,
                            ),
                        ),
                    ),
                    post: Some(
                        Assignment(
                            Var(
                                "b",
                            ),
                            Binary(
                                Add,
                                Var(
                                    "b",
                                ),
                                Constant(
                                    1,
                                ),
                            ),
                        ),
                    ),
                    body: Compound(
                        [
                            Expression(
                                Assignment(
                                    Var(
                                        "a",
                                    ),
                                    Binary(
                                        Subtract,
                                        Var(
                                            "a",
                                        ),
                                        Constant(
                                            1,
                                        ),
                                    ),
                                ),
                            ),
                            If(
                                Binary(
                                    LessThanOrEqual,
                                    Var(
                                        "a",
                                    ),
                                    Constant(
                                        0,
                                    ),
                                ),
                                Break(
                                    None,
                                ),
                                None,
                            ),
                        ],
                    ),
                    label: None,
                },
                Return(
                    Binary(
                        And,
                        Binary(
                            Equals,
                            Var(
                                "a",
                            ),
                            Constant(
                                0,
                            ),
                        ),
                        Binary(
                            Equals,
                            Var(
                                "b",
                            ),
                            Unary(
                                Minus,
                                Constant(
                                    11,
                                ),
                            ),
                        ),
                    ),
                ),
            ],
        },
    ],
}