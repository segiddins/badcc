Program {
    declarations: [
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "a.1",
                    ty: Int,
                    init: Constant(10),
                },
                VariableDeclaration {
                    name: "b.2",
                    ty: Int,
                    init: Constant(20),
                },
                For {
                    init: Some(
                        Assignment {
                            lhs: Var("b.2"),
                            rhs: Unary {
                                op: Minus,
                                expr: Constant(20),
                            },
                        },
                    ),
                    condition: Binary {
                        op: LessThan,
                        lhs: Var("b.2"),
                        rhs: Constant(0),
                    },
                    post: Assignment {
                        lhs: Var("b.2"),
                        rhs: Binary {
                            op: Add,
                            lhs: Var("b.2"),
                            rhs: Constant(1),
                        },
                    },
                    body: Compound(
                        [
                            Expression(
                                Assignment {
                                    lhs: Var("a.1"),
                                    rhs: Binary {
                                        op: Subtract,
                                        lhs: Var("a.1"),
                                        rhs: Constant(1),
                                    },
                                },
                            ),
                            If(
                                Binary {
                                    op: LessThanOrEqual,
                                    lhs: Var("a.1"),
                                    rhs: Constant(0),
                                },
                                Break {
                                    label: "loop.0",
                                },
                                None,
                            ),
                        ],
                    ),
                    label: "loop.0",
                },
                Return(
                    Binary {
                        op: And,
                        lhs: Binary {
                            op: Equals,
                            lhs: Var("a.1"),
                            rhs: Constant(0),
                        },
                        rhs: Binary {
                            op: Equals,
                            lhs: Var("b.2"),
                            rhs: Unary {
                                op: Minus,
                                expr: Constant(11),
                            },
                        },
                    },
                ),
            ],
        },
    ],
}