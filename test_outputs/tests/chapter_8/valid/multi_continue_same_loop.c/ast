Program {
    declarations: [
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "x",
                    ty: Int,
                    init: Constant(10),
                },
                VariableDeclaration {
                    name: "y",
                    ty: Int,
                    init: Constant(0),
                },
                VariableDeclaration {
                    name: "z",
                    ty: Int,
                    init: Constant(0),
                },
                DoWhile(
                    Compound(
                        [
                            Expression(
                                Assignment {
                                    lhs: Var("z"),
                                    rhs: Binary {
                                        op: Add,
                                        lhs: Var("z"),
                                        rhs: Constant(1),
                                    },
                                },
                            ),
                            If(
                                Binary {
                                    op: LessThanOrEqual,
                                    lhs: Var("x"),
                                    rhs: Constant(0),
                                },
                                Continue,
                                None,
                            ),
                            Expression(
                                Assignment {
                                    lhs: Var("x"),
                                    rhs: Binary {
                                        op: Subtract,
                                        lhs: Var("x"),
                                        rhs: Constant(1),
                                    },
                                },
                            ),
                            If(
                                Binary {
                                    op: GreaterThanOrEqual,
                                    lhs: Var("y"),
                                    rhs: Constant(10),
                                },
                                Continue,
                                None,
                            ),
                            Expression(
                                Assignment {
                                    lhs: Var("y"),
                                    rhs: Binary {
                                        op: Add,
                                        lhs: Var("y"),
                                        rhs: Constant(1),
                                    },
                                },
                            ),
                        ],
                    ),
                    Binary {
                        op: NotEqual,
                        lhs: Var("z"),
                        rhs: Constant(50),
                    },
                    None,
                ),
                Return(
                    Binary {
                        op: And,
                        lhs: Binary {
                            op: And,
                            lhs: Binary {
                                op: Equals,
                                lhs: Var("z"),
                                rhs: Constant(50),
                            },
                            rhs: Binary {
                                op: Equals,
                                lhs: Var("x"),
                                rhs: Constant(0),
                            },
                        },
                        rhs: Binary {
                            op: Equals,
                            lhs: Var("y"),
                            rhs: Constant(10),
                        },
                    },
                ),
            ],
        },
    ],
}