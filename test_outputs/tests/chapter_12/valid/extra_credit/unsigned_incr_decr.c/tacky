Program {
    static_variables: [],
    functions: [
        Function {
            identifier: "main",
            global: true,
            params: [],
            instructions: [
                Copy {
                    src: 0u,
                    dst: Var("i.1", UInt),
                },
                Copy {
                    src: Var("i.1", UInt),
                    dst: Var("main.tmp.0", UInt),
                },
                Binary {
                    op: Add,
                    lhs: Var("i.1", UInt),
                    rhs: 4294967295u,
                    dst: Var("i.1", UInt),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("main.tmp.0", UInt),
                    rhs: 0u,
                    dst: Var("main.tmp.1", UInt),
                },
                JumpIfZero(
                    Var("main.tmp.1", UInt),
                    "main.0.true",
                ),
                Return(
                    1,
                ),
                Jump(
                    "main.0.end",
                ),
                Label(
                    "main.0.true",
                ),
                Label(
                    "main.0.end",
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var("i.1", UInt),
                    rhs: 4294967295u,
                    dst: Var("main.tmp.2", UInt),
                },
                JumpIfZero(
                    Var("main.tmp.2", UInt),
                    "main.1.true",
                ),
                Return(
                    2,
                ),
                Jump(
                    "main.1.end",
                ),
                Label(
                    "main.1.true",
                ),
                Label(
                    "main.1.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("i.1", UInt),
                    rhs: 4294967295u,
                    dst: Var("i.1", UInt),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("i.1", UInt),
                    rhs: 4294967294u,
                    dst: Var("main.tmp.3", UInt),
                },
                JumpIfZero(
                    Var("main.tmp.3", UInt),
                    "main.2.true",
                ),
                Return(
                    3,
                ),
                Jump(
                    "main.2.end",
                ),
                Label(
                    "main.2.true",
                ),
                Label(
                    "main.2.end",
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var("i.1", UInt),
                    rhs: 4294967294u,
                    dst: Var("main.tmp.4", UInt),
                },
                JumpIfZero(
                    Var("main.tmp.4", UInt),
                    "main.3.true",
                ),
                Return(
                    4,
                ),
                Jump(
                    "main.3.end",
                ),
                Label(
                    "main.3.true",
                ),
                Label(
                    "main.3.end",
                ),
                Copy {
                    src: 18446744073709551614ul,
                    dst: Var("l.2", ULong),
                },
                Copy {
                    src: Var("l.2", ULong),
                    dst: Var("main.tmp.5", ULong),
                },
                Binary {
                    op: Add,
                    lhs: Var("l.2", ULong),
                    rhs: 1ul,
                    dst: Var("l.2", ULong),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("main.tmp.5", ULong),
                    rhs: 18446744073709551614ul,
                    dst: Var("main.tmp.6", ULong),
                },
                JumpIfZero(
                    Var("main.tmp.6", ULong),
                    "main.4.true",
                ),
                Return(
                    5,
                ),
                Jump(
                    "main.4.end",
                ),
                Label(
                    "main.4.true",
                ),
                Label(
                    "main.4.end",
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var("l.2", ULong),
                    rhs: 18446744073709551615ul,
                    dst: Var("main.tmp.7", ULong),
                },
                JumpIfZero(
                    Var("main.tmp.7", ULong),
                    "main.5.true",
                ),
                Return(
                    6,
                ),
                Jump(
                    "main.5.end",
                ),
                Label(
                    "main.5.true",
                ),
                Label(
                    "main.5.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("l.2", ULong),
                    rhs: 1ul,
                    dst: Var("l.2", ULong),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("l.2", ULong),
                    rhs: 0ul,
                    dst: Var("main.tmp.8", ULong),
                },
                JumpIfZero(
                    Var("main.tmp.8", ULong),
                    "main.6.true",
                ),
                Return(
                    7,
                ),
                Jump(
                    "main.6.end",
                ),
                Label(
                    "main.6.true",
                ),
                Label(
                    "main.6.end",
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var("l.2", ULong),
                    rhs: 0ul,
                    dst: Var("main.tmp.9", ULong),
                },
                JumpIfZero(
                    Var("main.tmp.9", ULong),
                    "main.7.true",
                ),
                Return(
                    8,
                ),
                Jump(
                    "main.7.end",
                ),
                Label(
                    "main.7.true",
                ),
                Label(
                    "main.7.end",
                ),
                Return(
                    0,
                ),
                Return(
                    0,
                ),
            ],
        },
    ],
}