Program {
    static_variables: [
        StaticVariable {
            identifier: "glob",
            global: true,
            init: 5000u,
            width: Four,
        },
    ],
    functions: [
        Function {
            identifier: "main",
            global: true,
            params: [],
            instructions: [
                ZeroExtend {
                    src: Var("glob", UInt),
                    dst: Var("main.tmp.0", Long),
                },
                Copy {
                    src: Var("main.tmp.0", Long),
                    dst: Var("should_spill.16", Long),
                },
                Binary {
                    op: Subtract,
                    lhs: Var("glob", UInt),
                    rhs: 4999u,
                    dst: Var("main.tmp.1", UInt),
                },
                Copy {
                    src: Var("main.tmp.1", UInt),
                    dst: Var("main.tmp.2", Int),
                },
                Copy {
                    src: Var("main.tmp.2", Int),
                    dst: Var("one.17", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("one.17", Int),
                    rhs: Var("one.17", Int),
                    dst: Var("main.tmp.3", Int),
                },
                Copy {
                    src: Var("main.tmp.3", Int),
                    dst: Var("two.18", Int),
                },
                Binary {
                    op: Add,
                    lhs: 2,
                    rhs: Var("one.17", Int),
                    dst: Var("main.tmp.4", Int),
                },
                Copy {
                    src: Var("main.tmp.4", Int),
                    dst: Var("three.19", Int),
                },
                Binary {
                    op: Multiply,
                    lhs: Var("two.18", Int),
                    rhs: Var("two.18", Int),
                    dst: Var("main.tmp.5", Int),
                },
                Copy {
                    src: Var("main.tmp.5", Int),
                    dst: Var("four.20", Int),
                },
                Binary {
                    op: Subtract,
                    lhs: 6,
                    rhs: Var("one.17", Int),
                    dst: Var("main.tmp.6", Int),
                },
                Copy {
                    src: Var("main.tmp.6", Int),
                    dst: Var("five.21", Int),
                },
                Binary {
                    op: Multiply,
                    lhs: Var("two.18", Int),
                    rhs: Var("three.19", Int),
                    dst: Var("main.tmp.7", Int),
                },
                Copy {
                    src: Var("main.tmp.7", Int),
                    dst: Var("six.22", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("one.17", Int),
                    rhs: 6,
                    dst: Var("main.tmp.8", Int),
                },
                Copy {
                    src: Var("main.tmp.8", Int),
                    dst: Var("seven.23", Int),
                },
                Binary {
                    op: Multiply,
                    lhs: Var("two.18", Int),
                    rhs: 4,
                    dst: Var("main.tmp.9", Int),
                },
                Copy {
                    src: Var("main.tmp.9", Int),
                    dst: Var("eight.24", Int),
                },
                Binary {
                    op: Multiply,
                    lhs: Var("three.19", Int),
                    rhs: Var("three.19", Int),
                    dst: Var("main.tmp.10", Int),
                },
                Copy {
                    src: Var("main.tmp.10", Int),
                    dst: Var("nine.25", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("four.20", Int),
                    rhs: Var("six.22", Int),
                    dst: Var("main.tmp.11", Int),
                },
                Copy {
                    src: Var("main.tmp.11", Int),
                    dst: Var("ten.26", Int),
                },
                Binary {
                    op: Subtract,
                    lhs: 16,
                    rhs: Var("five.21", Int),
                    dst: Var("main.tmp.12", Int),
                },
                Copy {
                    src: Var("main.tmp.12", Int),
                    dst: Var("eleven.27", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("six.22", Int),
                    rhs: Var("six.22", Int),
                    dst: Var("main.tmp.13", Int),
                },
                Copy {
                    src: Var("main.tmp.13", Int),
                    dst: Var("twelve.28", Int),
                },
                Call(
                    "check_12_ints",
                    [
                        Var("one.17", Int),
                        Var("two.18", Int),
                        Var("three.19", Int),
                        Var("four.20", Int),
                        Var("five.21", Int),
                        Var("six.22", Int),
                        Var("seven.23", Int),
                        Var("eight.24", Int),
                        Var("nine.25", Int),
                        Var("ten.26", Int),
                        Var("eleven.27", Int),
                        Var("twelve.28", Int),
                        1,
                    ],
                    Var("main.tmp.14", Int),
                ),
                Binary {
                    op: Subtract,
                    lhs: Var("glob", UInt),
                    rhs: 4987u,
                    dst: Var("main.tmp.15", UInt),
                },
                Copy {
                    src: Var("main.tmp.15", UInt),
                    dst: Var("main.tmp.16", Int),
                },
                Copy {
                    src: Var("main.tmp.16", Int),
                    dst: Var("thirteen.29", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("thirteen.29", Int),
                    rhs: 1,
                    dst: Var("main.tmp.17", Int),
                },
                Copy {
                    src: Var("main.tmp.17", Int),
                    dst: Var("fourteen.30", Int),
                },
                Binary {
                    op: Subtract,
                    lhs: 28,
                    rhs: Var("thirteen.29", Int),
                    dst: Var("main.tmp.18", Int),
                },
                Copy {
                    src: Var("main.tmp.18", Int),
                    dst: Var("fifteen.31", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("fourteen.30", Int),
                    rhs: 2,
                    dst: Var("main.tmp.19", Int),
                },
                Copy {
                    src: Var("main.tmp.19", Int),
                    dst: Var("sixteen.32", Int),
                },
                Binary {
                    op: Add,
                    lhs: 4,
                    rhs: Var("thirteen.29", Int),
                    dst: Var("main.tmp.20", Int),
                },
                Copy {
                    src: Var("main.tmp.20", Int),
                    dst: Var("seventeen.33", Int),
                },
                Binary {
                    op: Subtract,
                    lhs: 32,
                    rhs: Var("fourteen.30", Int),
                    dst: Var("main.tmp.21", Int),
                },
                Copy {
                    src: Var("main.tmp.21", Int),
                    dst: Var("eighteen.34", Int),
                },
                Binary {
                    op: Subtract,
                    lhs: 35,
                    rhs: Var("sixteen.32", Int),
                    dst: Var("main.tmp.22", Int),
                },
                Copy {
                    src: Var("main.tmp.22", Int),
                    dst: Var("nineteen.35", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("fifteen.31", Int),
                    rhs: 5,
                    dst: Var("main.tmp.23", Int),
                },
                Copy {
                    src: Var("main.tmp.23", Int),
                    dst: Var("twenty.36", Int),
                },
                Binary {
                    op: Multiply,
                    lhs: Var("thirteen.29", Int),
                    rhs: 2,
                    dst: Var("main.tmp.24", Int),
                },
                Binary {
                    op: Subtract,
                    lhs: Var("main.tmp.24", Int),
                    rhs: 5,
                    dst: Var("main.tmp.25", Int),
                },
                Copy {
                    src: Var("main.tmp.25", Int),
                    dst: Var("twenty_one.37", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("fifteen.31", Int),
                    rhs: 7,
                    dst: Var("main.tmp.26", Int),
                },
                Copy {
                    src: Var("main.tmp.26", Int),
                    dst: Var("twenty_two.38", Int),
                },
                Binary {
                    op: Add,
                    lhs: 6,
                    rhs: Var("seventeen.33", Int),
                    dst: Var("main.tmp.27", Int),
                },
                Copy {
                    src: Var("main.tmp.27", Int),
                    dst: Var("twenty_three.39", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("thirteen.29", Int),
                    rhs: 11,
                    dst: Var("main.tmp.28", Int),
                },
                Copy {
                    src: Var("main.tmp.28", Int),
                    dst: Var("twenty_four.40", Int),
                },
                Call(
                    "check_12_ints",
                    [
                        Var("thirteen.29", Int),
                        Var("fourteen.30", Int),
                        Var("fifteen.31", Int),
                        Var("sixteen.32", Int),
                        Var("seventeen.33", Int),
                        Var("eighteen.34", Int),
                        Var("nineteen.35", Int),
                        Var("twenty.36", Int),
                        Var("twenty_one.37", Int),
                        Var("twenty_two.38", Int),
                        Var("twenty_three.39", Int),
                        Var("twenty_four.40", Int),
                        13,
                    ],
                    Var("main.tmp.29", Int),
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var("should_spill.16", Long),
                    rhs: 5000l,
                    dst: Var("main.tmp.30", Long),
                },
                JumpIfZero(
                    Var("main.tmp.30", Long),
                    "main.0.true",
                ),
                Unary {
                    op: Negate,
                    src: 1,
                    dst: Var("main.tmp.31", Int),
                },
                Return(
                    Var("main.tmp.31", Int),
                ),
                Jump(
                    "main.0.end",
                ),
                Label(
                    "main.0.true",
                ),
                Label(
                    "main.0.end",
                ),
                Return(
                    0,
                ),
                Return(
                    0,
                ),
            ],
        },
        Function {
            identifier: "check_12_ints",
            global: true,
            params: [
                Var("a.42", Int),
                Var("b.43", Int),
                Var("c.44", Int),
                Var("d.45", Int),
                Var("e.46", Int),
                Var("f.47", Int),
                Var("g.48", Int),
                Var("h.49", Int),
                Var("i.50", Int),
                Var("j.51", Int),
                Var("k.52", Int),
                Var("l.53", Int),
                Var("start.54", Int),
            ],
            instructions: [
                Copy {
                    src: 0,
                    dst: Var("expected.55", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("start.54", Int),
                    rhs: 0,
                    dst: Var("check_12_ints.tmp.0", Int),
                },
                Copy {
                    src: Var("check_12_ints.tmp.0", Int),
                    dst: Var("expected.55", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("a.42", Int),
                    rhs: Var("expected.55", Int),
                    dst: Var("check_12_ints.tmp.1", Int),
                },
                JumpIfZero(
                    Var("check_12_ints.tmp.1", Int),
                    "check_12_ints.0.true",
                ),
                Return(
                    Var("expected.55", Int),
                ),
                Jump(
                    "check_12_ints.0.end",
                ),
                Label(
                    "check_12_ints.0.true",
                ),
                Label(
                    "check_12_ints.0.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("start.54", Int),
                    rhs: 1,
                    dst: Var("check_12_ints.tmp.2", Int),
                },
                Copy {
                    src: Var("check_12_ints.tmp.2", Int),
                    dst: Var("expected.55", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("b.43", Int),
                    rhs: Var("expected.55", Int),
                    dst: Var("check_12_ints.tmp.3", Int),
                },
                JumpIfZero(
                    Var("check_12_ints.tmp.3", Int),
                    "check_12_ints.1.true",
                ),
                Return(
                    Var("expected.55", Int),
                ),
                Jump(
                    "check_12_ints.1.end",
                ),
                Label(
                    "check_12_ints.1.true",
                ),
                Label(
                    "check_12_ints.1.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("start.54", Int),
                    rhs: 2,
                    dst: Var("check_12_ints.tmp.4", Int),
                },
                Copy {
                    src: Var("check_12_ints.tmp.4", Int),
                    dst: Var("expected.55", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("c.44", Int),
                    rhs: Var("expected.55", Int),
                    dst: Var("check_12_ints.tmp.5", Int),
                },
                JumpIfZero(
                    Var("check_12_ints.tmp.5", Int),
                    "check_12_ints.2.true",
                ),
                Return(
                    Var("expected.55", Int),
                ),
                Jump(
                    "check_12_ints.2.end",
                ),
                Label(
                    "check_12_ints.2.true",
                ),
                Label(
                    "check_12_ints.2.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("start.54", Int),
                    rhs: 3,
                    dst: Var("check_12_ints.tmp.6", Int),
                },
                Copy {
                    src: Var("check_12_ints.tmp.6", Int),
                    dst: Var("expected.55", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d.45", Int),
                    rhs: Var("expected.55", Int),
                    dst: Var("check_12_ints.tmp.7", Int),
                },
                JumpIfZero(
                    Var("check_12_ints.tmp.7", Int),
                    "check_12_ints.3.true",
                ),
                Return(
                    Var("expected.55", Int),
                ),
                Jump(
                    "check_12_ints.3.end",
                ),
                Label(
                    "check_12_ints.3.true",
                ),
                Label(
                    "check_12_ints.3.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("start.54", Int),
                    rhs: 4,
                    dst: Var("check_12_ints.tmp.8", Int),
                },
                Copy {
                    src: Var("check_12_ints.tmp.8", Int),
                    dst: Var("expected.55", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("e.46", Int),
                    rhs: Var("expected.55", Int),
                    dst: Var("check_12_ints.tmp.9", Int),
                },
                JumpIfZero(
                    Var("check_12_ints.tmp.9", Int),
                    "check_12_ints.4.true",
                ),
                Return(
                    Var("expected.55", Int),
                ),
                Jump(
                    "check_12_ints.4.end",
                ),
                Label(
                    "check_12_ints.4.true",
                ),
                Label(
                    "check_12_ints.4.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("start.54", Int),
                    rhs: 5,
                    dst: Var("check_12_ints.tmp.10", Int),
                },
                Copy {
                    src: Var("check_12_ints.tmp.10", Int),
                    dst: Var("expected.55", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("f.47", Int),
                    rhs: Var("expected.55", Int),
                    dst: Var("check_12_ints.tmp.11", Int),
                },
                JumpIfZero(
                    Var("check_12_ints.tmp.11", Int),
                    "check_12_ints.5.true",
                ),
                Return(
                    Var("expected.55", Int),
                ),
                Jump(
                    "check_12_ints.5.end",
                ),
                Label(
                    "check_12_ints.5.true",
                ),
                Label(
                    "check_12_ints.5.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("start.54", Int),
                    rhs: 6,
                    dst: Var("check_12_ints.tmp.12", Int),
                },
                Copy {
                    src: Var("check_12_ints.tmp.12", Int),
                    dst: Var("expected.55", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("g.48", Int),
                    rhs: Var("expected.55", Int),
                    dst: Var("check_12_ints.tmp.13", Int),
                },
                JumpIfZero(
                    Var("check_12_ints.tmp.13", Int),
                    "check_12_ints.6.true",
                ),
                Return(
                    Var("expected.55", Int),
                ),
                Jump(
                    "check_12_ints.6.end",
                ),
                Label(
                    "check_12_ints.6.true",
                ),
                Label(
                    "check_12_ints.6.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("start.54", Int),
                    rhs: 7,
                    dst: Var("check_12_ints.tmp.14", Int),
                },
                Copy {
                    src: Var("check_12_ints.tmp.14", Int),
                    dst: Var("expected.55", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("h.49", Int),
                    rhs: Var("expected.55", Int),
                    dst: Var("check_12_ints.tmp.15", Int),
                },
                JumpIfZero(
                    Var("check_12_ints.tmp.15", Int),
                    "check_12_ints.7.true",
                ),
                Return(
                    Var("expected.55", Int),
                ),
                Jump(
                    "check_12_ints.7.end",
                ),
                Label(
                    "check_12_ints.7.true",
                ),
                Label(
                    "check_12_ints.7.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("start.54", Int),
                    rhs: 8,
                    dst: Var("check_12_ints.tmp.16", Int),
                },
                Copy {
                    src: Var("check_12_ints.tmp.16", Int),
                    dst: Var("expected.55", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("i.50", Int),
                    rhs: Var("expected.55", Int),
                    dst: Var("check_12_ints.tmp.17", Int),
                },
                JumpIfZero(
                    Var("check_12_ints.tmp.17", Int),
                    "check_12_ints.8.true",
                ),
                Return(
                    Var("expected.55", Int),
                ),
                Jump(
                    "check_12_ints.8.end",
                ),
                Label(
                    "check_12_ints.8.true",
                ),
                Label(
                    "check_12_ints.8.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("start.54", Int),
                    rhs: 9,
                    dst: Var("check_12_ints.tmp.18", Int),
                },
                Copy {
                    src: Var("check_12_ints.tmp.18", Int),
                    dst: Var("expected.55", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("j.51", Int),
                    rhs: Var("expected.55", Int),
                    dst: Var("check_12_ints.tmp.19", Int),
                },
                JumpIfZero(
                    Var("check_12_ints.tmp.19", Int),
                    "check_12_ints.9.true",
                ),
                Return(
                    Var("expected.55", Int),
                ),
                Jump(
                    "check_12_ints.9.end",
                ),
                Label(
                    "check_12_ints.9.true",
                ),
                Label(
                    "check_12_ints.9.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("start.54", Int),
                    rhs: 10,
                    dst: Var("check_12_ints.tmp.20", Int),
                },
                Copy {
                    src: Var("check_12_ints.tmp.20", Int),
                    dst: Var("expected.55", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("k.52", Int),
                    rhs: Var("expected.55", Int),
                    dst: Var("check_12_ints.tmp.21", Int),
                },
                JumpIfZero(
                    Var("check_12_ints.tmp.21", Int),
                    "check_12_ints.10.true",
                ),
                Return(
                    Var("expected.55", Int),
                ),
                Jump(
                    "check_12_ints.10.end",
                ),
                Label(
                    "check_12_ints.10.true",
                ),
                Label(
                    "check_12_ints.10.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("start.54", Int),
                    rhs: 11,
                    dst: Var("check_12_ints.tmp.22", Int),
                },
                Copy {
                    src: Var("check_12_ints.tmp.22", Int),
                    dst: Var("expected.55", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("l.53", Int),
                    rhs: Var("expected.55", Int),
                    dst: Var("check_12_ints.tmp.23", Int),
                },
                JumpIfZero(
                    Var("check_12_ints.tmp.23", Int),
                    "check_12_ints.11.true",
                ),
                Return(
                    Var("expected.55", Int),
                ),
                Jump(
                    "check_12_ints.11.end",
                ),
                Label(
                    "check_12_ints.11.true",
                ),
                Label(
                    "check_12_ints.11.end",
                ),
                Return(
                    0,
                ),
                Return(
                    0,
                ),
            ],
        },
    ],
}