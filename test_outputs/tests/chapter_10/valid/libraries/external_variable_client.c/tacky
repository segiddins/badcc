Program {
    static_variables: [],
    functions: [
        Function {
            identifier: "main",
            global: true,
            params: [],
            instructions: [
                Binary {
                    op: NotEqual,
                    lhs: Var(
                        "x",
                        Int,
                    ),
                    rhs: Constant(
                        Int(
                            3,
                        ),
                    ),
                    dst: Var(
                        "main.tmp.0",
                        Int,
                    ),
                },
                JumpIfZero(
                    Var(
                        "main.tmp.0",
                        Int,
                    ),
                    "main.0.true",
                ),
                Return(
                    Constant(
                        Int(
                            1,
                        ),
                    ),
                ),
                Jump(
                    "main.0.end",
                ),
                Label(
                    "main.0.true",
                ),
                Label(
                    "main.0.end",
                ),
                Call(
                    "read_x",
                    [],
                    Var(
                        "main.tmp.1",
                        Int,
                    ),
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var(
                        "main.tmp.1",
                        Int,
                    ),
                    rhs: Constant(
                        Int(
                            3,
                        ),
                    ),
                    dst: Var(
                        "main.tmp.2",
                        Int,
                    ),
                },
                JumpIfZero(
                    Var(
                        "main.tmp.2",
                        Int,
                    ),
                    "main.1.true",
                ),
                Return(
                    Constant(
                        Int(
                            1,
                        ),
                    ),
                ),
                Jump(
                    "main.1.end",
                ),
                Label(
                    "main.1.true",
                ),
                Label(
                    "main.1.end",
                ),
                Copy {
                    src: Constant(
                        Int(
                            4,
                        ),
                    ),
                    dst: Var(
                        "x",
                        Int,
                    ),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var(
                        "x",
                        Int,
                    ),
                    rhs: Constant(
                        Int(
                            4,
                        ),
                    ),
                    dst: Var(
                        "main.tmp.3",
                        Int,
                    ),
                },
                JumpIfZero(
                    Var(
                        "main.tmp.3",
                        Int,
                    ),
                    "main.2.true",
                ),
                Return(
                    Constant(
                        Int(
                            1,
                        ),
                    ),
                ),
                Jump(
                    "main.2.end",
                ),
                Label(
                    "main.2.true",
                ),
                Label(
                    "main.2.end",
                ),
                Call(
                    "read_x",
                    [],
                    Var(
                        "main.tmp.4",
                        Int,
                    ),
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var(
                        "main.tmp.4",
                        Int,
                    ),
                    rhs: Constant(
                        Int(
                            4,
                        ),
                    ),
                    dst: Var(
                        "main.tmp.5",
                        Int,
                    ),
                },
                JumpIfZero(
                    Var(
                        "main.tmp.5",
                        Int,
                    ),
                    "main.3.true",
                ),
                Return(
                    Constant(
                        Int(
                            1,
                        ),
                    ),
                ),
                Jump(
                    "main.3.end",
                ),
                Label(
                    "main.3.true",
                ),
                Label(
                    "main.3.end",
                ),
                Call(
                    "update_x",
                    [
                        Constant(
                            Int(
                                5,
                            ),
                        ),
                    ],
                    Var(
                        "main.tmp.6",
                        Int,
                    ),
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var(
                        "x",
                        Int,
                    ),
                    rhs: Constant(
                        Int(
                            5,
                        ),
                    ),
                    dst: Var(
                        "main.tmp.7",
                        Int,
                    ),
                },
                JumpIfZero(
                    Var(
                        "main.tmp.7",
                        Int,
                    ),
                    "main.4.true",
                ),
                Return(
                    Constant(
                        Int(
                            1,
                        ),
                    ),
                ),
                Jump(
                    "main.4.end",
                ),
                Label(
                    "main.4.true",
                ),
                Label(
                    "main.4.end",
                ),
                Call(
                    "read_x",
                    [],
                    Var(
                        "main.tmp.8",
                        Int,
                    ),
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var(
                        "main.tmp.8",
                        Int,
                    ),
                    rhs: Constant(
                        Int(
                            5,
                        ),
                    ),
                    dst: Var(
                        "main.tmp.9",
                        Int,
                    ),
                },
                JumpIfZero(
                    Var(
                        "main.tmp.9",
                        Int,
                    ),
                    "main.5.true",
                ),
                Return(
                    Constant(
                        Int(
                            1,
                        ),
                    ),
                ),
                Jump(
                    "main.5.end",
                ),
                Label(
                    "main.5.true",
                ),
                Label(
                    "main.5.end",
                ),
                Return(
                    Constant(
                        Int(
                            0,
                        ),
                    ),
                ),
                Return(
                    Constant(
                        Int(
                            0,
                        ),
                    ),
                ),
            ],
        },
    ],
}