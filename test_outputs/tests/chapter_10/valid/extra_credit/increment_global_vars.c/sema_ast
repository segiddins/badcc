Program {
    declarations: [
        VariableDeclaration {
            name: "i",
            ty: Int,
            init: Constant(
                0,
            ),
        },
        VariableDeclaration {
            name: "j",
            ty: Int,
            init: Constant(
                0,
            ),
        },
        FunctionDeclaration {
            identifier: "incr_i",
            params: [],
            ret: Int,
            body: [
                If(
                    Binary(
                        Equals,
                        Var(
                            "i",
                        ),
                        Constant(
                            1,
                        ),
                    ),
                    Compound(
                        [
                            Expression(
                                Unary(
                                    PostfixIncrement,
                                    Var(
                                        "i",
                                    ),
                                ),
                            ),
                            Expression(
                                Unary(
                                    PrefixIncrement,
                                    Var(
                                        "i",
                                    ),
                                ),
                            ),
                        ],
                    ),
                    None,
                ),
                Return(
                    Constant(
                        0,
                    ),
                ),
            ],
        },
        FunctionDeclaration {
            identifier: "decr_j",
            params: [],
            ret: Int,
            body: [
                If(
                    Binary(
                        Equals,
                        Var(
                            "j",
                        ),
                        Unary(
                            Minus,
                            Constant(
                                1,
                            ),
                        ),
                    ),
                    Compound(
                        [
                            Expression(
                                Unary(
                                    PostfixDecrement,
                                    Var(
                                        "j",
                                    ),
                                ),
                            ),
                        ],
                    ),
                    None,
                ),
                Return(
                    Constant(
                        0,
                    ),
                ),
            ],
        },
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                Expression(
                    Ternary(
                        Unary(
                            PostfixIncrement,
                            Var(
                                "i",
                            ),
                        ),
                        Constant(
                            0,
                        ),
                        FunctionCall(
                            Var(
                                "incr_i",
                            ),
                            [],
                        ),
                    ),
                ),
                If(
                    Binary(
                        NotEqual,
                        Var(
                            "i",
                        ),
                        Constant(
                            3,
                        ),
                    ),
                    Compound(
                        [
                            Return(
                                Constant(
                                    1,
                                ),
                            ),
                        ],
                    ),
                    None,
                ),
                Expression(
                    Ternary(
                        Unary(
                            PrefixDecrement,
                            Var(
                                "j",
                            ),
                        ),
                        FunctionCall(
                            Var(
                                "decr_j",
                            ),
                            [],
                        ),
                        Constant(
                            0,
                        ),
                    ),
                ),
                If(
                    Binary(
                        NotEqual,
                        Var(
                            "j",
                        ),
                        Unary(
                            Minus,
                            Constant(
                                2,
                            ),
                        ),
                    ),
                    Compound(
                        [
                            Return(
                                Constant(
                                    2,
                                ),
                            ),
                        ],
                    ),
                    None,
                ),
                Return(
                    Constant(
                        0,
                    ),
                ),
            ],
        },
    ],
}