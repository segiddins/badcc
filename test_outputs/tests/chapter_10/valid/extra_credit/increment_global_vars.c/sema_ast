Program {
    declarations: [
        VariableDeclaration {
            name: "i",
            ty: Int,
            init: Constant(0),
        },
        VariableDeclaration {
            name: "j",
            ty: Int,
            init: Constant(0),
        },
        FunctionDeclaration {
            identifier: "incr_i",
            params: [],
            ret: Int,
            body: [
                If(
                    Binary {
                        op: Equals,
                        lhs: Var("i"),
                        rhs: Constant(1),
                    },
                    Compound(
                        [
                            Expression(
                                Unary {
                                    op: PostfixIncrement,
                                    expr: Var("i"),
                                },
                            ),
                            Expression(
                                Unary {
                                    op: PrefixIncrement,
                                    expr: Var("i"),
                                },
                            ),
                        ],
                    ),
                    None,
                ),
                Return(
                    Constant(0),
                ),
            ],
        },
        FunctionDeclaration {
            identifier: "decr_j",
            params: [],
            ret: Int,
            body: [
                If(
                    Binary {
                        op: Equals,
                        lhs: Var("j"),
                        rhs: Unary {
                            op: Minus,
                            expr: Constant(1),
                        },
                    },
                    Compound(
                        [
                            Expression(
                                Unary {
                                    op: PostfixDecrement,
                                    expr: Var("j"),
                                },
                            ),
                        ],
                    ),
                    None,
                ),
                Return(
                    Constant(0),
                ),
            ],
        },
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                Expression(
                    Ternary {
                        cond: Unary {
                            op: PostfixIncrement,
                            expr: Var("i"),
                        },
                        if_true: Constant(0),
                        if_false: FunctionCall {
                            function: Var("incr_i"),
                        },
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("i"),
                        rhs: Constant(3),
                    },
                    Compound(
                        [
                            Return(
                                Constant(1),
                            ),
                        ],
                    ),
                    None,
                ),
                Expression(
                    Ternary {
                        cond: Unary {
                            op: PrefixDecrement,
                            expr: Var("j"),
                        },
                        if_true: FunctionCall {
                            function: Var("decr_j"),
                        },
                        if_false: Constant(0),
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("j"),
                        rhs: Unary {
                            op: Minus,
                            expr: Constant(2),
                        },
                    },
                    Compound(
                        [
                            Return(
                                Constant(2),
                            ),
                        ],
                    ),
                    None,
                ),
                Return(
                    Constant(0),
                ),
            ],
        },
    ],
}