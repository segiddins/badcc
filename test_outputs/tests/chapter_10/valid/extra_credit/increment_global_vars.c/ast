Program {
    declarations: [
        VariableDeclaration {
            name: "i",
            ty: Int,
            init: Constant {
                constant: 0,
            },
        },
        VariableDeclaration {
            name: "j",
            ty: Int,
            init: Constant {
                constant: 0,
            },
        },
        FunctionDeclaration {
            identifier: "incr_i",
            params: [],
            ret: Int,
            body: [
                If(
                    Binary {
                        op: Equals,
                        lhs: Var {
                            name: "i",
                        },
                        rhs: Constant {
                            constant: 1,
                        },
                    },
                    Compound(
                        [
                            Expression(
                                Unary {
                                    op: PostfixIncrement,
                                    expr: Var {
                                        name: "i",
                                    },
                                },
                            ),
                            Expression(
                                Unary {
                                    op: PrefixIncrement,
                                    expr: Var {
                                        name: "i",
                                    },
                                },
                            ),
                        ],
                    ),
                    None,
                ),
                Return(
                    Constant {
                        constant: 0,
                    },
                ),
            ],
        },
        FunctionDeclaration {
            identifier: "decr_j",
            params: [],
            ret: Int,
            body: [
                If(
                    Binary {
                        op: Equals,
                        lhs: Var {
                            name: "j",
                        },
                        rhs: Unary {
                            op: Minus,
                            expr: Constant {
                                constant: 1,
                            },
                        },
                    },
                    Compound(
                        [
                            Expression(
                                Unary {
                                    op: PostfixDecrement,
                                    expr: Var {
                                        name: "j",
                                    },
                                },
                            ),
                        ],
                    ),
                    None,
                ),
                Return(
                    Constant {
                        constant: 0,
                    },
                ),
            ],
        },
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                Expression(
                    Ternary {
                        cond: Unary {
                            op: PostfixIncrement,
                            expr: Var {
                                name: "i",
                            },
                        },
                        if_true: Constant {
                            constant: 0,
                        },
                        if_false: FunctionCall {
                            function: Var {
                                name: "incr_i",
                            },
                            params: [],
                        },
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var {
                            name: "i",
                        },
                        rhs: Constant {
                            constant: 3,
                        },
                    },
                    Compound(
                        [
                            Return(
                                Constant {
                                    constant: 1,
                                },
                            ),
                        ],
                    ),
                    None,
                ),
                Expression(
                    Ternary {
                        cond: Unary {
                            op: PrefixDecrement,
                            expr: Var {
                                name: "j",
                            },
                        },
                        if_true: FunctionCall {
                            function: Var {
                                name: "decr_j",
                            },
                            params: [],
                        },
                        if_false: Constant {
                            constant: 0,
                        },
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var {
                            name: "j",
                        },
                        rhs: Unary {
                            op: Minus,
                            expr: Constant {
                                constant: 2,
                            },
                        },
                    },
                    Compound(
                        [
                            Return(
                                Constant {
                                    constant: 2,
                                },
                            ),
                        ],
                    ),
                    None,
                ),
                Return(
                    Constant {
                        constant: 0,
                    },
                ),
            ],
        },
    ],
}