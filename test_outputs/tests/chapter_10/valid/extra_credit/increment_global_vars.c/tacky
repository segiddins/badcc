Program {
    static_variables: [
        StaticVariable {
            identifier: "i",
            global: true,
            init: 0,
            width: Four,
        },
        StaticVariable {
            identifier: "j",
            global: true,
            init: 0,
            width: Four,
        },
    ],
    functions: [
        Function {
            identifier: "incr_i",
            global: true,
            params: [],
            instructions: [
                Binary {
                    op: Equals,
                    lhs: Var("i", Int),
                    rhs: 1,
                    dst: Var("incr_i.tmp.0", Int),
                },
                JumpIfZero(
                    Var("incr_i.tmp.0", Int),
                    "incr_i.0.true",
                ),
                Copy {
                    src: Var("i", Int),
                    dst: Var("incr_i.tmp.1", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("i", Int),
                    rhs: 1,
                    dst: Var("i", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("i", Int),
                    rhs: 1,
                    dst: Var("i", Int),
                },
                Jump(
                    "incr_i.0.end",
                ),
                Label(
                    "incr_i.0.true",
                ),
                Label(
                    "incr_i.0.end",
                ),
                Return(
                    0,
                ),
                Return(
                    0,
                ),
            ],
        },
        Function {
            identifier: "decr_j",
            global: true,
            params: [],
            instructions: [
                Unary {
                    op: Negate,
                    src: 1,
                    dst: Var("decr_j.tmp.0", Int),
                },
                Binary {
                    op: Equals,
                    lhs: Var("j", Int),
                    rhs: Var("decr_j.tmp.0", Int),
                    dst: Var("decr_j.tmp.1", Int),
                },
                JumpIfZero(
                    Var("decr_j.tmp.1", Int),
                    "decr_j.0.true",
                ),
                Copy {
                    src: Var("j", Int),
                    dst: Var("decr_j.tmp.2", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("j", Int),
                    rhs: -1,
                    dst: Var("j", Int),
                },
                Jump(
                    "decr_j.0.end",
                ),
                Label(
                    "decr_j.0.true",
                ),
                Label(
                    "decr_j.0.end",
                ),
                Return(
                    0,
                ),
                Return(
                    0,
                ),
            ],
        },
        Function {
            identifier: "main",
            global: true,
            params: [],
            instructions: [
                Copy {
                    src: Var("i", Int),
                    dst: Var("main.tmp.0", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("i", Int),
                    rhs: 1,
                    dst: Var("i", Int),
                },
                JumpIfZero(
                    Var("main.tmp.0", Int),
                    "main.0.true",
                ),
                Copy {
                    src: 0,
                    dst: Var("main.tmp.1", Int),
                },
                Jump(
                    "main.0.end",
                ),
                Label(
                    "main.0.true",
                ),
                Call(
                    "incr_i",
                    [],
                    Var("main.tmp.2", Int),
                ),
                Copy {
                    src: Var("main.tmp.2", Int),
                    dst: Var("main.tmp.1", Int),
                },
                Label(
                    "main.0.end",
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var("i", Int),
                    rhs: 3,
                    dst: Var("main.tmp.3", Int),
                },
                JumpIfZero(
                    Var("main.tmp.3", Int),
                    "main.1.true",
                ),
                Return(
                    1,
                ),
                Jump(
                    "main.1.end",
                ),
                Label(
                    "main.1.true",
                ),
                Label(
                    "main.1.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("j", Int),
                    rhs: -1,
                    dst: Var("j", Int),
                },
                JumpIfZero(
                    Var("j", Int),
                    "main.2.true",
                ),
                Call(
                    "decr_j",
                    [],
                    Var("main.tmp.4", Int),
                ),
                Copy {
                    src: Var("main.tmp.4", Int),
                    dst: Var("main.tmp.5", Int),
                },
                Jump(
                    "main.2.end",
                ),
                Label(
                    "main.2.true",
                ),
                Copy {
                    src: 0,
                    dst: Var("main.tmp.5", Int),
                },
                Label(
                    "main.2.end",
                ),
                Unary {
                    op: Negate,
                    src: 2,
                    dst: Var("main.tmp.6", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("j", Int),
                    rhs: Var("main.tmp.6", Int),
                    dst: Var("main.tmp.7", Int),
                },
                JumpIfZero(
                    Var("main.tmp.7", Int),
                    "main.3.true",
                ),
                Return(
                    2,
                ),
                Jump(
                    "main.3.end",
                ),
                Label(
                    "main.3.true",
                ),
                Label(
                    "main.3.end",
                ),
                Return(
                    0,
                ),
                Return(
                    0,
                ),
            ],
        },
    ],
}