Program {
    static_variables: [
        StaticVariable {
            identifier: "k.3",
            global: false,
            init: 1,
            width: Four,
        },
        StaticVariable {
            identifier: "l.4",
            global: false,
            init: 48,
            width: Four,
        },
        StaticVariable {
            identifier: "j.2",
            global: false,
            init: 0,
            width: Four,
        },
        StaticVariable {
            identifier: "i.1",
            global: false,
            init: 0,
            width: Four,
        },
    ],
    functions: [
        Function {
            identifier: "f",
            global: true,
            params: [],
            instructions: [
                Binary {
                    op: Add,
                    lhs: Var(
                        "i.1",
                        Int,
                    ),
                    rhs: Constant(
                        Int(
                            1,
                        ),
                    ),
                    dst: Var(
                        "f.tmp.0",
                        Int,
                    ),
                },
                Copy {
                    src: Var(
                        "f.tmp.0",
                        Int,
                    ),
                    dst: Var(
                        "i.1",
                        Int,
                    ),
                },
                Binary {
                    op: Subtract,
                    lhs: Var(
                        "j.2",
                        Int,
                    ),
                    rhs: Var(
                        "i.1",
                        Int,
                    ),
                    dst: Var(
                        "f.tmp.1",
                        Int,
                    ),
                },
                Copy {
                    src: Var(
                        "f.tmp.1",
                        Int,
                    ),
                    dst: Var(
                        "j.2",
                        Int,
                    ),
                },
                Binary {
                    op: Multiply,
                    lhs: Var(
                        "k.3",
                        Int,
                    ),
                    rhs: Var(
                        "j.2",
                        Int,
                    ),
                    dst: Var(
                        "f.tmp.2",
                        Int,
                    ),
                },
                Copy {
                    src: Var(
                        "f.tmp.2",
                        Int,
                    ),
                    dst: Var(
                        "k.3",
                        Int,
                    ),
                },
                Binary {
                    op: Divide,
                    lhs: Var(
                        "l.4",
                        Int,
                    ),
                    rhs: Constant(
                        Int(
                            2,
                        ),
                    ),
                    dst: Var(
                        "f.tmp.3",
                        Int,
                    ),
                },
                Copy {
                    src: Var(
                        "f.tmp.3",
                        Int,
                    ),
                    dst: Var(
                        "l.4",
                        Int,
                    ),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var(
                        "i.1",
                        Int,
                    ),
                    rhs: Constant(
                        Int(
                            3,
                        ),
                    ),
                    dst: Var(
                        "f.tmp.4",
                        Int,
                    ),
                },
                JumpIfZero(
                    Var(
                        "f.tmp.4",
                        Int,
                    ),
                    "f.0.true",
                ),
                Return(
                    Constant(
                        Int(
                            1,
                        ),
                    ),
                ),
                Jump(
                    "f.0.end",
                ),
                Label(
                    "f.0.true",
                ),
                Label(
                    "f.0.end",
                ),
                Unary {
                    op: Negate,
                    src: Constant(
                        Int(
                            6,
                        ),
                    ),
                    dst: Var(
                        "f.tmp.5",
                        Int,
                    ),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var(
                        "j.2",
                        Int,
                    ),
                    rhs: Var(
                        "f.tmp.5",
                        Int,
                    ),
                    dst: Var(
                        "f.tmp.6",
                        Int,
                    ),
                },
                JumpIfZero(
                    Var(
                        "f.tmp.6",
                        Int,
                    ),
                    "f.1.true",
                ),
                Return(
                    Constant(
                        Int(
                            2,
                        ),
                    ),
                ),
                Jump(
                    "f.1.end",
                ),
                Label(
                    "f.1.true",
                ),
                Label(
                    "f.1.end",
                ),
                Unary {
                    op: Negate,
                    src: Constant(
                        Int(
                            18,
                        ),
                    ),
                    dst: Var(
                        "f.tmp.7",
                        Int,
                    ),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var(
                        "k.3",
                        Int,
                    ),
                    rhs: Var(
                        "f.tmp.7",
                        Int,
                    ),
                    dst: Var(
                        "f.tmp.8",
                        Int,
                    ),
                },
                JumpIfZero(
                    Var(
                        "f.tmp.8",
                        Int,
                    ),
                    "f.2.true",
                ),
                Return(
                    Constant(
                        Int(
                            3,
                        ),
                    ),
                ),
                Jump(
                    "f.2.end",
                ),
                Label(
                    "f.2.true",
                ),
                Label(
                    "f.2.end",
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var(
                        "l.4",
                        Int,
                    ),
                    rhs: Constant(
                        Int(
                            6,
                        ),
                    ),
                    dst: Var(
                        "f.tmp.9",
                        Int,
                    ),
                },
                JumpIfZero(
                    Var(
                        "f.tmp.9",
                        Int,
                    ),
                    "f.3.true",
                ),
                Return(
                    Constant(
                        Int(
                            4,
                        ),
                    ),
                ),
                Jump(
                    "f.3.end",
                ),
                Label(
                    "f.3.true",
                ),
                Label(
                    "f.3.end",
                ),
                Return(
                    Constant(
                        Int(
                            0,
                        ),
                    ),
                ),
                Return(
                    Constant(
                        Int(
                            0,
                        ),
                    ),
                ),
            ],
        },
        Function {
            identifier: "main",
            global: true,
            params: [],
            instructions: [
                Call(
                    "f",
                    [],
                    Var(
                        "main.tmp.0",
                        Int,
                    ),
                ),
                Call(
                    "f",
                    [],
                    Var(
                        "main.tmp.1",
                        Int,
                    ),
                ),
                Call(
                    "f",
                    [],
                    Var(
                        "main.tmp.2",
                        Int,
                    ),
                ),
                Return(
                    Var(
                        "main.tmp.2",
                        Int,
                    ),
                ),
                Return(
                    Constant(
                        Int(
                            0,
                        ),
                    ),
                ),
            ],
        },
    ],
}