Program {
    declarations: [
        FunctionDeclaration {
            identifier: "f",
            params: [],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "i",
                    ty: Int,
                    init: Constant(0),
                    storage: Static,
                },
                VariableDeclaration {
                    name: "j",
                    ty: Int,
                    init: Constant(0),
                    storage: Static,
                },
                VariableDeclaration {
                    name: "k",
                    ty: Int,
                    init: Constant(1),
                    storage: Static,
                },
                VariableDeclaration {
                    name: "l",
                    ty: Int,
                    init: Constant(48),
                    storage: Static,
                },
                Expression(
                    CompoundAssignment {
                        op: Add,
                        lhs: Var("i"),
                        rhs: Constant(1),
                    },
                ),
                Expression(
                    CompoundAssignment {
                        op: Subtract,
                        lhs: Var("j"),
                        rhs: Var("i"),
                    },
                ),
                Expression(
                    CompoundAssignment {
                        op: Multiply,
                        lhs: Var("k"),
                        rhs: Var("j"),
                    },
                ),
                Expression(
                    CompoundAssignment {
                        op: Divide,
                        lhs: Var("l"),
                        rhs: Constant(2),
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("i"),
                        rhs: Constant(3),
                    },
                    Compound(
                        [
                            Return(
                                Constant(1),
                            ),
                        ],
                    ),
                    None,
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("j"),
                        rhs: Unary {
                            op: Minus,
                            expr: Constant(6),
                        },
                    },
                    Compound(
                        [
                            Return(
                                Constant(2),
                            ),
                        ],
                    ),
                    None,
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("k"),
                        rhs: Unary {
                            op: Minus,
                            expr: Constant(18),
                        },
                    },
                    Compound(
                        [
                            Return(
                                Constant(3),
                            ),
                        ],
                    ),
                    None,
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("l"),
                        rhs: Constant(6),
                    },
                    Compound(
                        [
                            Return(
                                Constant(4),
                            ),
                        ],
                    ),
                    None,
                ),
                Return(
                    Constant(0),
                ),
            ],
        },
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                Expression(
                    FunctionCall {
                        function: Var("f"),
                    },
                ),
                Expression(
                    FunctionCall {
                        function: Var("f"),
                    },
                ),
                Return(
                    FunctionCall {
                        function: Var("f"),
                    },
                ),
            ],
        },
    ],
}