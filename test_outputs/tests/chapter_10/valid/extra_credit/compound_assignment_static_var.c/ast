Program {
    declarations: [
        FunctionDeclaration {
            identifier: "f",
            params: [],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "i",
                    ty: Int,
                    init: Constant(
                        0,
                    ),
                    storage: Static,
                },
                VariableDeclaration {
                    name: "j",
                    ty: Int,
                    init: Constant(
                        0,
                    ),
                    storage: Static,
                },
                VariableDeclaration {
                    name: "k",
                    ty: Int,
                    init: Constant(
                        1,
                    ),
                    storage: Static,
                },
                VariableDeclaration {
                    name: "l",
                    ty: Int,
                    init: Constant(
                        48,
                    ),
                    storage: Static,
                },
                Expression(
                    CompoundAssignment(
                        Var(
                            "i",
                        ),
                        Add,
                        Constant(
                            1,
                        ),
                    ),
                ),
                Expression(
                    CompoundAssignment(
                        Var(
                            "j",
                        ),
                        Subtract,
                        Var(
                            "i",
                        ),
                    ),
                ),
                Expression(
                    CompoundAssignment(
                        Var(
                            "k",
                        ),
                        Multiply,
                        Var(
                            "j",
                        ),
                    ),
                ),
                Expression(
                    CompoundAssignment(
                        Var(
                            "l",
                        ),
                        Divide,
                        Constant(
                            2,
                        ),
                    ),
                ),
                If(
                    Binary(
                        NotEqual,
                        Var(
                            "i",
                        ),
                        Constant(
                            3,
                        ),
                    ),
                    Compound(
                        [
                            Return(
                                Constant(
                                    1,
                                ),
                            ),
                        ],
                    ),
                    None,
                ),
                If(
                    Binary(
                        NotEqual,
                        Var(
                            "j",
                        ),
                        Unary(
                            Minus,
                            Constant(
                                6,
                            ),
                        ),
                    ),
                    Compound(
                        [
                            Return(
                                Constant(
                                    2,
                                ),
                            ),
                        ],
                    ),
                    None,
                ),
                If(
                    Binary(
                        NotEqual,
                        Var(
                            "k",
                        ),
                        Unary(
                            Minus,
                            Constant(
                                18,
                            ),
                        ),
                    ),
                    Compound(
                        [
                            Return(
                                Constant(
                                    3,
                                ),
                            ),
                        ],
                    ),
                    None,
                ),
                If(
                    Binary(
                        NotEqual,
                        Var(
                            "l",
                        ),
                        Constant(
                            6,
                        ),
                    ),
                    Compound(
                        [
                            Return(
                                Constant(
                                    4,
                                ),
                            ),
                        ],
                    ),
                    None,
                ),
                Return(
                    Constant(
                        0,
                    ),
                ),
            ],
        },
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                Expression(
                    FunctionCall(
                        Var(
                            "f",
                        ),
                        [],
                    ),
                ),
                Expression(
                    FunctionCall(
                        Var(
                            "f",
                        ),
                        [],
                    ),
                ),
                Return(
                    FunctionCall(
                        Var(
                            "f",
                        ),
                        [],
                    ),
                ),
            ],
        },
    ],
}