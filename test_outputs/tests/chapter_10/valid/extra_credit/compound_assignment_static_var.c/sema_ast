Program {
    declarations: [
        FunctionDeclaration {
            identifier: "f",
            params: [],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "i.1",
                    ty: Int,
                    init: Constant(
                        0,
                    ),
                    storage: Static,
                },
                VariableDeclaration {
                    name: "j.2",
                    ty: Int,
                    init: Constant(
                        0,
                    ),
                    storage: Static,
                },
                VariableDeclaration {
                    name: "k.3",
                    ty: Int,
                    init: Constant(
                        1,
                    ),
                    storage: Static,
                },
                VariableDeclaration {
                    name: "l.4",
                    ty: Int,
                    init: Constant(
                        48,
                    ),
                    storage: Static,
                },
                Expression(
                    Assignment(
                        Var(
                            "i.1",
                        ),
                        Binary(
                            Add,
                            Var(
                                "i.1",
                            ),
                            Constant(
                                1,
                            ),
                        ),
                    ),
                ),
                Expression(
                    Assignment(
                        Var(
                            "j.2",
                        ),
                        Binary(
                            Subtract,
                            Var(
                                "j.2",
                            ),
                            Var(
                                "i.1",
                            ),
                        ),
                    ),
                ),
                Expression(
                    Assignment(
                        Var(
                            "k.3",
                        ),
                        Binary(
                            Multiply,
                            Var(
                                "k.3",
                            ),
                            Var(
                                "j.2",
                            ),
                        ),
                    ),
                ),
                Expression(
                    Assignment(
                        Var(
                            "l.4",
                        ),
                        Binary(
                            Divide,
                            Var(
                                "l.4",
                            ),
                            Constant(
                                2,
                            ),
                        ),
                    ),
                ),
                If(
                    Binary(
                        NotEqual,
                        Var(
                            "i.1",
                        ),
                        Constant(
                            3,
                        ),
                    ),
                    Compound(
                        [
                            Return(
                                Constant(
                                    1,
                                ),
                            ),
                        ],
                    ),
                    None,
                ),
                If(
                    Binary(
                        NotEqual,
                        Var(
                            "j.2",
                        ),
                        Unary(
                            Minus,
                            Constant(
                                6,
                            ),
                        ),
                    ),
                    Compound(
                        [
                            Return(
                                Constant(
                                    2,
                                ),
                            ),
                        ],
                    ),
                    None,
                ),
                If(
                    Binary(
                        NotEqual,
                        Var(
                            "k.3",
                        ),
                        Unary(
                            Minus,
                            Constant(
                                18,
                            ),
                        ),
                    ),
                    Compound(
                        [
                            Return(
                                Constant(
                                    3,
                                ),
                            ),
                        ],
                    ),
                    None,
                ),
                If(
                    Binary(
                        NotEqual,
                        Var(
                            "l.4",
                        ),
                        Constant(
                            6,
                        ),
                    ),
                    Compound(
                        [
                            Return(
                                Constant(
                                    4,
                                ),
                            ),
                        ],
                    ),
                    None,
                ),
                Return(
                    Constant(
                        0,
                    ),
                ),
            ],
        },
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                Expression(
                    FunctionCall(
                        Var(
                            "f",
                        ),
                        [],
                    ),
                ),
                Expression(
                    FunctionCall(
                        Var(
                            "f",
                        ),
                        [],
                    ),
                ),
                Return(
                    FunctionCall(
                        Var(
                            "f",
                        ),
                        [],
                    ),
                ),
            ],
        },
    ],
}