Program {
    definitions: [
        Function {
            name: "test_sum",
            global: true,
            instructions: [
                AllocateStack(
                    80,
                ),
                Move {
                    asm_type: Longword,
                    source: Register(DI, Four),
                    destination: Stack(12, Four),
                },
                Move {
                    asm_type: Longword,
                    source: Register(SI, Four),
                    destination: Stack(16, Four),
                },
                Move {
                    asm_type: Longword,
                    source: Register(DX, Four),
                    destination: Stack(20, Four),
                },
                Move {
                    asm_type: Quadword,
                    source: Register(CX, Eight),
                    destination: Stack(28, Eight),
                },
                Move {
                    asm_type: Longword,
                    source: Register(R8, Four),
                    destination: Stack(32, Four),
                },
                Move {
                    asm_type: Quadword,
                    source: Register(R9, Eight),
                    destination: Stack(40, Eight),
                },
                Move {
                    asm_type: Longword,
                    source: Stack(-16, Four),
                    destination: Register(R10, Four),
                },
                Move {
                    asm_type: Longword,
                    source: Register(R10, Four),
                    destination: Stack(44, Four),
                },
                Move {
                    asm_type: Longword,
                    source: Stack(-24, Four),
                    destination: Register(R10, Four),
                },
                Move {
                    asm_type: Longword,
                    source: Register(R10, Four),
                    destination: Stack(48, Four),
                },
                Move {
                    asm_type: Quadword,
                    source: Stack(-32, Eight),
                    destination: Register(R10, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Register(R10, Eight),
                    destination: Stack(56, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Stack(28, Eight),
                    destination: Register(R10, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Register(R10, Eight),
                    destination: Stack(64, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Stack(40, Eight),
                    destination: Register(R10, Eight),
                },
                Binary(
                    Quadword,
                    Add,
                    Register(R10, Eight),
                    Stack(64, Eight),
                ),
                Cmp(
                    Quadword,
                    Immediate(100, Eight),
                    Stack(64, Eight),
                ),
                Move {
                    asm_type: Quadword,
                    source: Immediate(0, Eight),
                    destination: Stack(72, Eight),
                },
                SetCC(
                    L,
                    Stack(72, Eight),
                ),
                Cmp(
                    Quadword,
                    Immediate(0, Four),
                    Stack(72, Eight),
                ),
                JmpCC(
                    E,
                    "test_sum.0.true",
                ),
                Move {
                    asm_type: Longword,
                    source: Immediate(1, Four),
                    destination: Register(AX, Four),
                },
                Ret,
                Jmp(
                    "test_sum.0.end",
                ),
                Label(
                    "test_sum.0.true",
                ),
                Label(
                    "test_sum.0.end",
                ),
                Cmp(
                    Quadword,
                    Immediate(100, Eight),
                    Stack(56, Eight),
                ),
                Move {
                    asm_type: Quadword,
                    source: Immediate(0, Eight),
                    destination: Stack(80, Eight),
                },
                SetCC(
                    L,
                    Stack(80, Eight),
                ),
                Cmp(
                    Quadword,
                    Immediate(0, Four),
                    Stack(80, Eight),
                ),
                JmpCC(
                    E,
                    "test_sum.1.true",
                ),
                Move {
                    asm_type: Longword,
                    source: Immediate(2, Four),
                    destination: Register(AX, Four),
                },
                Ret,
                Jmp(
                    "test_sum.1.end",
                ),
                Label(
                    "test_sum.1.true",
                ),
                Label(
                    "test_sum.1.end",
                ),
                Move {
                    asm_type: Longword,
                    source: Immediate(0, Four),
                    destination: Register(AX, Four),
                },
                Ret,
                Move {
                    asm_type: Longword,
                    source: Immediate(0, Four),
                    destination: Register(AX, Four),
                },
                Ret,
            ],
        },
    ],
    static_variables: [],
    static_constants: [],
}