Program {
    declarations: [
        VariableDeclaration {
            name: "l",
            ty: Long,
            storage: Extern,
        },
        FunctionDeclaration {
            identifier: "return_l",
            params: [],
            ret: Long,
        },
        FunctionDeclaration {
            identifier: "return_l_as_int",
            params: [],
            ret: Int,
        },
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                If(
                    Binary {
                        op: NotEqual,
                        lhs: FunctionCall {
                            function: Var("return_l"),
                        },
                        rhs: Constant(8589934592l),
                    },
                    Return(
                        Constant(1),
                    ),
                    None,
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: FunctionCall {
                            function: Var("return_l_as_int"),
                        },
                        rhs: Constant(0),
                    },
                    Return(
                        Constant(2),
                    ),
                    None,
                ),
                Expression(
                    Assignment {
                        lhs: Var("l"),
                        rhs: Binary {
                            op: Subtract,
                            lhs: Var("l"),
                            rhs: Constant(10l),
                        },
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: FunctionCall {
                            function: Var("return_l"),
                        },
                        rhs: Constant(8589934582l),
                    },
                    Return(
                        Constant(3),
                    ),
                    None,
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: FunctionCall {
                            function: Var("return_l_as_int"),
                        },
                        rhs: Unary {
                            op: Minus,
                            expr: Constant(10),
                        },
                    },
                    Return(
                        Constant(4),
                    ),
                    None,
                ),
                Return(
                    Constant(0),
                ),
            ],
        },
    ],
}