Program {
    declarations: [
        FunctionDeclaration {
            identifier: "check_12_ints",
            params: [
                (
                    Int,
                    "start",
                    SourceSpan {
                        offset: SourceOffset(
                            22,
                        ),
                        length: 5,
                    },
                ),
                (
                    Int,
                    "a",
                    SourceSpan {
                        offset: SourceOffset(
                            33,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "b",
                    SourceSpan {
                        offset: SourceOffset(
                            40,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "c",
                    SourceSpan {
                        offset: SourceOffset(
                            47,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "d",
                    SourceSpan {
                        offset: SourceOffset(
                            54,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "e",
                    SourceSpan {
                        offset: SourceOffset(
                            61,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "f",
                    SourceSpan {
                        offset: SourceOffset(
                            68,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "g",
                    SourceSpan {
                        offset: SourceOffset(
                            75,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "h",
                    SourceSpan {
                        offset: SourceOffset(
                            100,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "i",
                    SourceSpan {
                        offset: SourceOffset(
                            107,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "j",
                    SourceSpan {
                        offset: SourceOffset(
                            114,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "k",
                    SourceSpan {
                        offset: SourceOffset(
                            121,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "l",
                    SourceSpan {
                        offset: SourceOffset(
                            128,
                        ),
                        length: 1,
                    },
                ),
            ],
            ret: Int,
        },
        VariableDeclaration {
            name: "glob",
            ty: Long,
            init: Constant(5l),
        },
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "should_spill",
                    ty: Long,
                    init: Binary {
                        op: Multiply,
                        lhs: Var("glob"),
                        rhs: Constant(4294967307l),
                    },
                },
                VariableDeclaration {
                    name: "one",
                    ty: Int,
                    init: Binary {
                        op: Subtract,
                        lhs: Var("glob"),
                        rhs: Constant(4),
                    },
                },
                VariableDeclaration {
                    name: "two",
                    ty: Int,
                    init: Binary {
                        op: Add,
                        lhs: Var("one"),
                        rhs: Var("one"),
                    },
                },
                VariableDeclaration {
                    name: "three",
                    ty: Int,
                    init: Binary {
                        op: Add,
                        lhs: Constant(2),
                        rhs: Var("one"),
                    },
                },
                VariableDeclaration {
                    name: "four",
                    ty: Int,
                    init: Binary {
                        op: Multiply,
                        lhs: Var("two"),
                        rhs: Var("two"),
                    },
                },
                VariableDeclaration {
                    name: "five",
                    ty: Int,
                    init: Binary {
                        op: Subtract,
                        lhs: Constant(6),
                        rhs: Var("one"),
                    },
                },
                VariableDeclaration {
                    name: "six",
                    ty: Int,
                    init: Binary {
                        op: Multiply,
                        lhs: Var("two"),
                        rhs: Var("three"),
                    },
                },
                VariableDeclaration {
                    name: "seven",
                    ty: Int,
                    init: Binary {
                        op: Add,
                        lhs: Var("one"),
                        rhs: Constant(6),
                    },
                },
                VariableDeclaration {
                    name: "eight",
                    ty: Int,
                    init: Binary {
                        op: Multiply,
                        lhs: Var("two"),
                        rhs: Constant(4),
                    },
                },
                VariableDeclaration {
                    name: "nine",
                    ty: Int,
                    init: Binary {
                        op: Multiply,
                        lhs: Var("three"),
                        rhs: Var("three"),
                    },
                },
                VariableDeclaration {
                    name: "ten",
                    ty: Int,
                    init: Binary {
                        op: Add,
                        lhs: Var("four"),
                        rhs: Var("six"),
                    },
                },
                VariableDeclaration {
                    name: "eleven",
                    ty: Int,
                    init: Binary {
                        op: Subtract,
                        lhs: Constant(16),
                        rhs: Var("five"),
                    },
                },
                VariableDeclaration {
                    name: "twelve",
                    ty: Int,
                    init: Binary {
                        op: Add,
                        lhs: Var("six"),
                        rhs: Var("six"),
                    },
                },
                Expression(
                    FunctionCall {
                        function: Var("check_12_ints"),
                        params: [
                            Var("one"),
                            Var("two"),
                            Var("three"),
                            Var("four"),
                            Var("five"),
                            Var("six"),
                            Var("seven"),
                            Var("eight"),
                            Var("nine"),
                            Var("ten"),
                            Var("eleven"),
                            Var("twelve"),
                            Constant(1),
                        ],
                    },
                ),
                VariableDeclaration {
                    name: "thirteen",
                    ty: Int,
                    init: Binary {
                        op: Add,
                        lhs: Var("glob"),
                        rhs: Constant(8),
                    },
                },
                VariableDeclaration {
                    name: "fourteen",
                    ty: Int,
                    init: Binary {
                        op: Add,
                        lhs: Var("thirteen"),
                        rhs: Constant(1),
                    },
                },
                VariableDeclaration {
                    name: "fifteen",
                    ty: Int,
                    init: Binary {
                        op: Subtract,
                        lhs: Constant(28),
                        rhs: Var("thirteen"),
                    },
                },
                VariableDeclaration {
                    name: "sixteen",
                    ty: Int,
                    init: Binary {
                        op: Add,
                        lhs: Var("fourteen"),
                        rhs: Constant(2),
                    },
                },
                VariableDeclaration {
                    name: "seventeen",
                    ty: Int,
                    init: Binary {
                        op: Add,
                        lhs: Constant(4),
                        rhs: Var("thirteen"),
                    },
                },
                VariableDeclaration {
                    name: "eighteen",
                    ty: Int,
                    init: Binary {
                        op: Subtract,
                        lhs: Constant(32),
                        rhs: Var("fourteen"),
                    },
                },
                VariableDeclaration {
                    name: "nineteen",
                    ty: Int,
                    init: Binary {
                        op: Subtract,
                        lhs: Constant(35),
                        rhs: Var("sixteen"),
                    },
                },
                VariableDeclaration {
                    name: "twenty",
                    ty: Int,
                    init: Binary {
                        op: Add,
                        lhs: Var("fifteen"),
                        rhs: Constant(5),
                    },
                },
                VariableDeclaration {
                    name: "twenty_one",
                    ty: Int,
                    init: Binary {
                        op: Subtract,
                        lhs: Binary {
                            op: Multiply,
                            lhs: Var("thirteen"),
                            rhs: Constant(2),
                        },
                        rhs: Constant(5),
                    },
                },
                VariableDeclaration {
                    name: "twenty_two",
                    ty: Int,
                    init: Binary {
                        op: Add,
                        lhs: Var("fifteen"),
                        rhs: Constant(7),
                    },
                },
                VariableDeclaration {
                    name: "twenty_three",
                    ty: Int,
                    init: Binary {
                        op: Add,
                        lhs: Constant(6),
                        rhs: Var("seventeen"),
                    },
                },
                VariableDeclaration {
                    name: "twenty_four",
                    ty: Int,
                    init: Binary {
                        op: Add,
                        lhs: Var("thirteen"),
                        rhs: Constant(11),
                    },
                },
                Expression(
                    FunctionCall {
                        function: Var("check_12_ints"),
                        params: [
                            Var("thirteen"),
                            Var("fourteen"),
                            Var("fifteen"),
                            Var("sixteen"),
                            Var("seventeen"),
                            Var("eighteen"),
                            Var("nineteen"),
                            Var("twenty"),
                            Var("twenty_one"),
                            Var("twenty_two"),
                            Var("twenty_three"),
                            Var("twenty_four"),
                            Constant(13),
                        ],
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("should_spill"),
                        rhs: Constant(21474836535l),
                    },
                    Compound(
                        [
                            Return(
                                Unary {
                                    op: Minus,
                                    expr: Constant(1),
                                },
                            ),
                        ],
                    ),
                    None,
                ),
                Return(
                    Constant(0),
                ),
            ],
        },
        FunctionDeclaration {
            identifier: "check_12_ints",
            params: [
                (
                    Int,
                    "a",
                    SourceSpan {
                        offset: SourceOffset(
                            1333,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "b",
                    SourceSpan {
                        offset: SourceOffset(
                            1340,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "c",
                    SourceSpan {
                        offset: SourceOffset(
                            1347,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "d",
                    SourceSpan {
                        offset: SourceOffset(
                            1354,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "e",
                    SourceSpan {
                        offset: SourceOffset(
                            1361,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "f",
                    SourceSpan {
                        offset: SourceOffset(
                            1368,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "g",
                    SourceSpan {
                        offset: SourceOffset(
                            1375,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "h",
                    SourceSpan {
                        offset: SourceOffset(
                            1382,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "i",
                    SourceSpan {
                        offset: SourceOffset(
                            1389,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "j",
                    SourceSpan {
                        offset: SourceOffset(
                            1414,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "k",
                    SourceSpan {
                        offset: SourceOffset(
                            1421,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "l",
                    SourceSpan {
                        offset: SourceOffset(
                            1428,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "start",
                    SourceSpan {
                        offset: SourceOffset(
                            1435,
                        ),
                        length: 5,
                    },
                ),
            ],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "expected",
                    ty: Int,
                    init: Constant(0),
                },
                Expression(
                    Assignment {
                        lhs: Var("expected"),
                        rhs: Binary {
                            op: Add,
                            lhs: Var("start"),
                            rhs: Constant(0),
                        },
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("a"),
                        rhs: Var("expected"),
                    },
                    Compound(
                        [
                            Return(
                                Var("expected"),
                            ),
                        ],
                    ),
                    None,
                ),
                Expression(
                    Assignment {
                        lhs: Var("expected"),
                        rhs: Binary {
                            op: Add,
                            lhs: Var("start"),
                            rhs: Constant(1),
                        },
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("b"),
                        rhs: Var("expected"),
                    },
                    Compound(
                        [
                            Return(
                                Var("expected"),
                            ),
                        ],
                    ),
                    None,
                ),
                Expression(
                    Assignment {
                        lhs: Var("expected"),
                        rhs: Binary {
                            op: Add,
                            lhs: Var("start"),
                            rhs: Constant(2),
                        },
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("c"),
                        rhs: Var("expected"),
                    },
                    Compound(
                        [
                            Return(
                                Var("expected"),
                            ),
                        ],
                    ),
                    None,
                ),
                Expression(
                    Assignment {
                        lhs: Var("expected"),
                        rhs: Binary {
                            op: Add,
                            lhs: Var("start"),
                            rhs: Constant(3),
                        },
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("d"),
                        rhs: Var("expected"),
                    },
                    Compound(
                        [
                            Return(
                                Var("expected"),
                            ),
                        ],
                    ),
                    None,
                ),
                Expression(
                    Assignment {
                        lhs: Var("expected"),
                        rhs: Binary {
                            op: Add,
                            lhs: Var("start"),
                            rhs: Constant(4),
                        },
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("e"),
                        rhs: Var("expected"),
                    },
                    Compound(
                        [
                            Return(
                                Var("expected"),
                            ),
                        ],
                    ),
                    None,
                ),
                Expression(
                    Assignment {
                        lhs: Var("expected"),
                        rhs: Binary {
                            op: Add,
                            lhs: Var("start"),
                            rhs: Constant(5),
                        },
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("f"),
                        rhs: Var("expected"),
                    },
                    Compound(
                        [
                            Return(
                                Var("expected"),
                            ),
                        ],
                    ),
                    None,
                ),
                Expression(
                    Assignment {
                        lhs: Var("expected"),
                        rhs: Binary {
                            op: Add,
                            lhs: Var("start"),
                            rhs: Constant(6),
                        },
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("g"),
                        rhs: Var("expected"),
                    },
                    Compound(
                        [
                            Return(
                                Var("expected"),
                            ),
                        ],
                    ),
                    None,
                ),
                Expression(
                    Assignment {
                        lhs: Var("expected"),
                        rhs: Binary {
                            op: Add,
                            lhs: Var("start"),
                            rhs: Constant(7),
                        },
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("h"),
                        rhs: Var("expected"),
                    },
                    Compound(
                        [
                            Return(
                                Var("expected"),
                            ),
                        ],
                    ),
                    None,
                ),
                Expression(
                    Assignment {
                        lhs: Var("expected"),
                        rhs: Binary {
                            op: Add,
                            lhs: Var("start"),
                            rhs: Constant(8),
                        },
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("i"),
                        rhs: Var("expected"),
                    },
                    Compound(
                        [
                            Return(
                                Var("expected"),
                            ),
                        ],
                    ),
                    None,
                ),
                Expression(
                    Assignment {
                        lhs: Var("expected"),
                        rhs: Binary {
                            op: Add,
                            lhs: Var("start"),
                            rhs: Constant(9),
                        },
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("j"),
                        rhs: Var("expected"),
                    },
                    Compound(
                        [
                            Return(
                                Var("expected"),
                            ),
                        ],
                    ),
                    None,
                ),
                Expression(
                    Assignment {
                        lhs: Var("expected"),
                        rhs: Binary {
                            op: Add,
                            lhs: Var("start"),
                            rhs: Constant(10),
                        },
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("k"),
                        rhs: Var("expected"),
                    },
                    Compound(
                        [
                            Return(
                                Var("expected"),
                            ),
                        ],
                    ),
                    None,
                ),
                Expression(
                    Assignment {
                        lhs: Var("expected"),
                        rhs: Binary {
                            op: Add,
                            lhs: Var("start"),
                            rhs: Constant(11),
                        },
                    },
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("l"),
                        rhs: Var("expected"),
                    },
                    Compound(
                        [
                            Return(
                                Var("expected"),
                            ),
                        ],
                    ),
                    None,
                ),
                Return(
                    Constant(0),
                ),
            ],
        },
    ],
}