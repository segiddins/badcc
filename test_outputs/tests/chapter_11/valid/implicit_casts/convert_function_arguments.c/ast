Program {
    declarations: [
        FunctionDeclaration {
            identifier: "foo",
            params: [
                (
                    Long,
                    "a",
                    SourceSpan {
                        offset: SourceOffset(
                            13,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "b",
                    SourceSpan {
                        offset: SourceOffset(
                            20,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "c",
                    SourceSpan {
                        offset: SourceOffset(
                            27,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "d",
                    SourceSpan {
                        offset: SourceOffset(
                            34,
                        ),
                        length: 1,
                    },
                ),
                (
                    Long,
                    "e",
                    SourceSpan {
                        offset: SourceOffset(
                            42,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "f",
                    SourceSpan {
                        offset: SourceOffset(
                            49,
                        ),
                        length: 1,
                    },
                ),
                (
                    Long,
                    "g",
                    SourceSpan {
                        offset: SourceOffset(
                            57,
                        ),
                        length: 1,
                    },
                ),
                (
                    Int,
                    "h",
                    SourceSpan {
                        offset: SourceOffset(
                            64,
                        ),
                        length: 1,
                    },
                ),
            ],
            ret: Int,
            body: [
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("a"),
                        rhs: Unary {
                            op: Minus,
                            expr: Constant(1l),
                        },
                    },
                    Return(
                        Constant(1),
                    ),
                    None,
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("b"),
                        rhs: Constant(2),
                    },
                    Return(
                        Constant(2),
                    ),
                    None,
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("c"),
                        rhs: Constant(0),
                    },
                    Return(
                        Constant(3),
                    ),
                    None,
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("d"),
                        rhs: Unary {
                            op: Minus,
                            expr: Constant(5),
                        },
                    },
                    Return(
                        Constant(4),
                    ),
                    None,
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("e"),
                        rhs: Unary {
                            op: Minus,
                            expr: Constant(101l),
                        },
                    },
                    Return(
                        Constant(5),
                    ),
                    None,
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("f"),
                        rhs: Unary {
                            op: Minus,
                            expr: Constant(123),
                        },
                    },
                    Return(
                        Constant(6),
                    ),
                    None,
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("g"),
                        rhs: Unary {
                            op: Minus,
                            expr: Constant(10l),
                        },
                    },
                    Return(
                        Constant(7),
                    ),
                    None,
                ),
                If(
                    Binary {
                        op: NotEqual,
                        lhs: Var("h"),
                        rhs: Constant(1234),
                    },
                    Return(
                        Constant(8),
                    ),
                    None,
                ),
                Return(
                    Constant(0),
                ),
            ],
        },
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "a",
                    ty: Int,
                    init: Unary {
                        op: Minus,
                        expr: Constant(1),
                    },
                },
                VariableDeclaration {
                    name: "b",
                    ty: Long,
                    init: Constant(4294967298l),
                },
                VariableDeclaration {
                    name: "c",
                    ty: Long,
                    init: Unary {
                        op: Minus,
                        expr: Constant(4294967296l),
                    },
                },
                VariableDeclaration {
                    name: "d",
                    ty: Long,
                    init: Constant(21474836475l),
                },
                VariableDeclaration {
                    name: "e",
                    ty: Int,
                    init: Unary {
                        op: Minus,
                        expr: Constant(101),
                    },
                },
                VariableDeclaration {
                    name: "f",
                    ty: Long,
                    init: Unary {
                        op: Minus,
                        expr: Constant(123),
                    },
                },
                VariableDeclaration {
                    name: "g",
                    ty: Int,
                    init: Unary {
                        op: Minus,
                        expr: Constant(10),
                    },
                },
                VariableDeclaration {
                    name: "h",
                    ty: Long,
                    init: Unary {
                        op: Minus,
                        expr: Constant(9223372036854774574l),
                    },
                },
                Return(
                    FunctionCall {
                        function: Var("foo"),
                        params: [
                            Var("a"),
                            Var("b"),
                            Var("c"),
                            Var("d"),
                            Var("e"),
                            Var("f"),
                            Var("g"),
                            Var("h"),
                        ],
                    },
                ),
            ],
        },
    ],
}