Program {
    static_variables: [],
    functions: [
        Function {
            identifier: "foo",
            global: true,
            params: [
                Var("a.1", Long),
                Var("b.2", Int),
                Var("c.3", Int),
                Var("d.4", Int),
                Var("e.5", Long),
                Var("f.6", Int),
                Var("g.7", Long),
                Var("h.8", Int),
            ],
            instructions: [
                Unary {
                    op: Negate,
                    src: 1l,
                    dst: Var("foo.tmp.0", Long),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("a.1", Long),
                    rhs: Var("foo.tmp.0", Long),
                    dst: Var("foo.tmp.1", Long),
                },
                JumpIfZero(
                    Var("foo.tmp.1", Long),
                    "foo.0.true",
                ),
                Return(
                    1,
                ),
                Jump(
                    "foo.0.end",
                ),
                Label(
                    "foo.0.true",
                ),
                Label(
                    "foo.0.end",
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var("b.2", Int),
                    rhs: 2,
                    dst: Var("foo.tmp.2", Int),
                },
                JumpIfZero(
                    Var("foo.tmp.2", Int),
                    "foo.1.true",
                ),
                Return(
                    2,
                ),
                Jump(
                    "foo.1.end",
                ),
                Label(
                    "foo.1.true",
                ),
                Label(
                    "foo.1.end",
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var("c.3", Int),
                    rhs: 0,
                    dst: Var("foo.tmp.3", Int),
                },
                JumpIfZero(
                    Var("foo.tmp.3", Int),
                    "foo.2.true",
                ),
                Return(
                    3,
                ),
                Jump(
                    "foo.2.end",
                ),
                Label(
                    "foo.2.true",
                ),
                Label(
                    "foo.2.end",
                ),
                Unary {
                    op: Negate,
                    src: 5,
                    dst: Var("foo.tmp.4", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d.4", Int),
                    rhs: Var("foo.tmp.4", Int),
                    dst: Var("foo.tmp.5", Int),
                },
                JumpIfZero(
                    Var("foo.tmp.5", Int),
                    "foo.3.true",
                ),
                Return(
                    4,
                ),
                Jump(
                    "foo.3.end",
                ),
                Label(
                    "foo.3.true",
                ),
                Label(
                    "foo.3.end",
                ),
                Unary {
                    op: Negate,
                    src: 101l,
                    dst: Var("foo.tmp.6", Long),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("e.5", Long),
                    rhs: Var("foo.tmp.6", Long),
                    dst: Var("foo.tmp.7", Long),
                },
                JumpIfZero(
                    Var("foo.tmp.7", Long),
                    "foo.4.true",
                ),
                Return(
                    5,
                ),
                Jump(
                    "foo.4.end",
                ),
                Label(
                    "foo.4.true",
                ),
                Label(
                    "foo.4.end",
                ),
                Unary {
                    op: Negate,
                    src: 123,
                    dst: Var("foo.tmp.8", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("f.6", Int),
                    rhs: Var("foo.tmp.8", Int),
                    dst: Var("foo.tmp.9", Int),
                },
                JumpIfZero(
                    Var("foo.tmp.9", Int),
                    "foo.5.true",
                ),
                Return(
                    6,
                ),
                Jump(
                    "foo.5.end",
                ),
                Label(
                    "foo.5.true",
                ),
                Label(
                    "foo.5.end",
                ),
                Unary {
                    op: Negate,
                    src: 10l,
                    dst: Var("foo.tmp.10", Long),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("g.7", Long),
                    rhs: Var("foo.tmp.10", Long),
                    dst: Var("foo.tmp.11", Long),
                },
                JumpIfZero(
                    Var("foo.tmp.11", Long),
                    "foo.6.true",
                ),
                Return(
                    7,
                ),
                Jump(
                    "foo.6.end",
                ),
                Label(
                    "foo.6.true",
                ),
                Label(
                    "foo.6.end",
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var("h.8", Int),
                    rhs: 1234,
                    dst: Var("foo.tmp.12", Int),
                },
                JumpIfZero(
                    Var("foo.tmp.12", Int),
                    "foo.7.true",
                ),
                Return(
                    8,
                ),
                Jump(
                    "foo.7.end",
                ),
                Label(
                    "foo.7.true",
                ),
                Label(
                    "foo.7.end",
                ),
                Return(
                    0,
                ),
                Return(
                    0,
                ),
            ],
        },
        Function {
            identifier: "main",
            global: true,
            params: [],
            instructions: [
                Unary {
                    op: Negate,
                    src: 1,
                    dst: Var("main.tmp.0", Int),
                },
                Copy {
                    src: Var("main.tmp.0", Int),
                    dst: Var("a.10", Int),
                },
                Copy {
                    src: 4294967298l,
                    dst: Var("b.11", Long),
                },
                Unary {
                    op: Negate,
                    src: 4294967296l,
                    dst: Var("main.tmp.1", Long),
                },
                Copy {
                    src: Var("main.tmp.1", Long),
                    dst: Var("c.12", Long),
                },
                Copy {
                    src: 21474836475l,
                    dst: Var("d.13", Long),
                },
                Unary {
                    op: Negate,
                    src: 101,
                    dst: Var("main.tmp.2", Int),
                },
                Copy {
                    src: Var("main.tmp.2", Int),
                    dst: Var("e.14", Int),
                },
                Unary {
                    op: Negate,
                    src: 123,
                    dst: Var("main.tmp.3", Int),
                },
                SignExtend {
                    src: Var("main.tmp.3", Int),
                    dst: Var("main.tmp.4", Long),
                },
                Copy {
                    src: Var("main.tmp.4", Long),
                    dst: Var("f.15", Long),
                },
                Unary {
                    op: Negate,
                    src: 10,
                    dst: Var("main.tmp.5", Int),
                },
                Copy {
                    src: Var("main.tmp.5", Int),
                    dst: Var("g.16", Int),
                },
                Unary {
                    op: Negate,
                    src: 9223372036854774574l,
                    dst: Var("main.tmp.6", Long),
                },
                Copy {
                    src: Var("main.tmp.6", Long),
                    dst: Var("h.17", Long),
                },
                SignExtend {
                    src: Var("a.10", Int),
                    dst: Var("main.tmp.7", Long),
                },
                Truncate {
                    src: Var("b.11", Long),
                    dst: Var("main.tmp.8", Int),
                },
                Truncate {
                    src: Var("c.12", Long),
                    dst: Var("main.tmp.9", Int),
                },
                Truncate {
                    src: Var("d.13", Long),
                    dst: Var("main.tmp.10", Int),
                },
                SignExtend {
                    src: Var("e.14", Int),
                    dst: Var("main.tmp.11", Long),
                },
                Truncate {
                    src: Var("f.15", Long),
                    dst: Var("main.tmp.12", Int),
                },
                SignExtend {
                    src: Var("g.16", Int),
                    dst: Var("main.tmp.13", Long),
                },
                Truncate {
                    src: Var("h.17", Long),
                    dst: Var("main.tmp.14", Int),
                },
                Call(
                    "foo",
                    [
                        Var("main.tmp.7", Long),
                        Var("main.tmp.8", Int),
                        Var("main.tmp.9", Int),
                        Var("main.tmp.10", Int),
                        Var("main.tmp.11", Long),
                        Var("main.tmp.12", Int),
                        Var("main.tmp.13", Long),
                        Var("main.tmp.14", Int),
                    ],
                    Var("main.tmp.15", Int),
                ),
                Return(
                    Var("main.tmp.15", Int),
                ),
                Return(
                    0,
                ),
            ],
        },
    ],
}