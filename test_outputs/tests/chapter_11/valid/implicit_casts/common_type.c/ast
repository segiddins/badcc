Program {
    declarations: [
        VariableDeclaration {
            name: "l",
            ty: Long,
        },
        VariableDeclaration {
            name: "i",
            ty: Int,
        },
        FunctionDeclaration {
            identifier: "addition",
            params: [],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "result",
                    ty: Long,
                    init: Binary {
                        op: Add,
                        lhs: Var("i"),
                        rhs: Var("l"),
                    },
                },
                Return(
                    Binary {
                        op: Equals,
                        lhs: Var("result"),
                        rhs: Constant(2147483663l),
                    },
                ),
            ],
        },
        FunctionDeclaration {
            identifier: "division",
            params: [],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "int_result",
                    ty: Int,
                    init: Binary {
                        op: Divide,
                        lhs: Var("l"),
                        rhs: Var("i"),
                    },
                },
                Return(
                    Binary {
                        op: Equals,
                        lhs: Var("int_result"),
                        rhs: Constant(214748364),
                    },
                ),
            ],
        },
        FunctionDeclaration {
            identifier: "comparison",
            params: [],
            ret: Int,
            body: [
                Return(
                    Binary {
                        op: LessThanOrEqual,
                        lhs: Var("i"),
                        rhs: Var("l"),
                    },
                ),
            ],
        },
        FunctionDeclaration {
            identifier: "conditional",
            params: [],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "result",
                    ty: Long,
                    init: Ternary {
                        cond: Constant(1),
                        if_true: Var("l"),
                        if_false: Var("i"),
                    },
                },
                Return(
                    Binary {
                        op: Equals,
                        lhs: Var("result"),
                        rhs: Constant(8589934592l),
                    },
                ),
            ],
        },
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                Expression(
                    Assignment {
                        lhs: Var("l"),
                        rhs: Constant(2147483653l),
                    },
                ),
                Expression(
                    Assignment {
                        lhs: Var("i"),
                        rhs: Constant(10),
                    },
                ),
                If(
                    Unary {
                        op: Not,
                        expr: FunctionCall {
                            function: Var("addition"),
                        },
                    },
                    Compound(
                        [
                            Return(
                                Constant(1),
                            ),
                        ],
                    ),
                    None,
                ),
                Expression(
                    Assignment {
                        lhs: Var("l"),
                        rhs: Constant(2147483649l),
                    },
                ),
                If(
                    Unary {
                        op: Not,
                        expr: FunctionCall {
                            function: Var("division"),
                        },
                    },
                    Compound(
                        [
                            Return(
                                Constant(2),
                            ),
                        ],
                    ),
                    None,
                ),
                Expression(
                    Assignment {
                        lhs: Var("i"),
                        rhs: Unary {
                            op: Minus,
                            expr: Constant(100),
                        },
                    },
                ),
                Expression(
                    Assignment {
                        lhs: Var("l"),
                        rhs: Constant(2147483648l),
                    },
                ),
                If(
                    Unary {
                        op: Not,
                        expr: FunctionCall {
                            function: Var("comparison"),
                        },
                    },
                    Compound(
                        [
                            Return(
                                Constant(3),
                            ),
                        ],
                    ),
                    None,
                ),
                Expression(
                    Assignment {
                        lhs: Var("l"),
                        rhs: Constant(8589934592l),
                    },
                ),
                Expression(
                    Assignment {
                        lhs: Var("i"),
                        rhs: Constant(10),
                    },
                ),
                If(
                    Unary {
                        op: Not,
                        expr: FunctionCall {
                            function: Var("conditional"),
                        },
                    },
                    Compound(
                        [
                            Return(
                                Constant(4),
                            ),
                        ],
                    ),
                    None,
                ),
                Return(
                    Constant(0),
                ),
            ],
        },
    ],
}