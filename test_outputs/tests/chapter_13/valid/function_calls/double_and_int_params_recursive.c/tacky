Program {
    static_variables: [],
    functions: [
        Function {
            identifier: "fun",
            global: true,
            params: [
                Var("i1.1", Int),
                Var("d1.2", Double),
                Var("i2.3", Int),
                Var("d2.4", Double),
                Var("i3.5", Int),
                Var("d3.6", Double),
                Var("i4.7", Int),
                Var("d4.8", Double),
                Var("i5.9", Int),
                Var("d5.10", Double),
                Var("i6.11", Int),
                Var("d6.12", Double),
                Var("i7.13", Int),
                Var("d7.14", Double),
                Var("i8.15", Int),
                Var("d8.16", Double),
                Var("i9.17", Int),
                Var("d9.18", Double),
            ],
            instructions: [
                IntToDouble {
                    src: Var("i1.1", Int),
                    dst: Var("fun.tmp.0", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("fun.tmp.0", Double),
                    rhs: Var("d9.18", Double),
                    dst: Var("fun.tmp.1", Double),
                },
                JumpIfZero(
                    Var("fun.tmp.1", Double),
                    "fun.0.true",
                ),
                Binary {
                    op: Add,
                    lhs: Var("i1.1", Int),
                    rhs: 1,
                    dst: Var("fun.tmp.2", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("i2.3", Int),
                    rhs: 1,
                    dst: Var("fun.tmp.3", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("i3.5", Int),
                    rhs: 1,
                    dst: Var("fun.tmp.4", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("i4.7", Int),
                    rhs: 1,
                    dst: Var("fun.tmp.5", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("i5.9", Int),
                    rhs: 1,
                    dst: Var("fun.tmp.6", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("i6.11", Int),
                    rhs: 1,
                    dst: Var("fun.tmp.7", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("i7.13", Int),
                    rhs: 1,
                    dst: Var("fun.tmp.8", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("i8.15", Int),
                    rhs: 1,
                    dst: Var("fun.tmp.9", Int),
                },
                Binary {
                    op: Add,
                    lhs: Var("i9.17", Int),
                    rhs: 1,
                    dst: Var("fun.tmp.10", Int),
                },
                Call(
                    "fun",
                    [
                        Var("fun.tmp.2", Int),
                        Var("d1.2", Double),
                        Var("fun.tmp.3", Int),
                        Var("d2.4", Double),
                        Var("fun.tmp.4", Int),
                        Var("d3.6", Double),
                        Var("fun.tmp.5", Int),
                        Var("d4.8", Double),
                        Var("fun.tmp.6", Int),
                        Var("d5.10", Double),
                        Var("fun.tmp.7", Int),
                        Var("d6.12", Double),
                        Var("fun.tmp.8", Int),
                        Var("d7.14", Double),
                        Var("fun.tmp.9", Int),
                        Var("d8.16", Double),
                        Var("fun.tmp.10", Int),
                        Var("d9.18", Double),
                    ],
                    Var("fun.tmp.11", Int),
                ),
                Copy {
                    src: Var("fun.tmp.11", Int),
                    dst: Var("call1.19", Int),
                },
                Binary {
                    op: Subtract,
                    lhs: Var("d1.2", Double),
                    rhs: 1.0,
                    dst: Var("fun.tmp.12", Double),
                },
                Binary {
                    op: Subtract,
                    lhs: Var("d2.4", Double),
                    rhs: 1.0,
                    dst: Var("fun.tmp.13", Double),
                },
                Binary {
                    op: Subtract,
                    lhs: Var("d3.6", Double),
                    rhs: 1.0,
                    dst: Var("fun.tmp.14", Double),
                },
                Binary {
                    op: Subtract,
                    lhs: Var("d4.8", Double),
                    rhs: 1.0,
                    dst: Var("fun.tmp.15", Double),
                },
                Binary {
                    op: Subtract,
                    lhs: Var("d5.10", Double),
                    rhs: 1.0,
                    dst: Var("fun.tmp.16", Double),
                },
                Binary {
                    op: Subtract,
                    lhs: Var("d6.12", Double),
                    rhs: 1.0,
                    dst: Var("fun.tmp.17", Double),
                },
                Binary {
                    op: Subtract,
                    lhs: Var("d7.14", Double),
                    rhs: 1.0,
                    dst: Var("fun.tmp.18", Double),
                },
                Binary {
                    op: Subtract,
                    lhs: Var("d8.16", Double),
                    rhs: 1.0,
                    dst: Var("fun.tmp.19", Double),
                },
                Binary {
                    op: Subtract,
                    lhs: Var("d9.18", Double),
                    rhs: 1.0,
                    dst: Var("fun.tmp.20", Double),
                },
                Call(
                    "fun",
                    [
                        Var("i1.1", Int),
                        Var("fun.tmp.12", Double),
                        Var("i2.3", Int),
                        Var("fun.tmp.13", Double),
                        Var("i3.5", Int),
                        Var("fun.tmp.14", Double),
                        Var("i4.7", Int),
                        Var("fun.tmp.15", Double),
                        Var("i5.9", Int),
                        Var("fun.tmp.16", Double),
                        Var("i6.11", Int),
                        Var("fun.tmp.17", Double),
                        Var("i7.13", Int),
                        Var("fun.tmp.18", Double),
                        Var("i8.15", Int),
                        Var("fun.tmp.19", Double),
                        Var("i9.17", Int),
                        Var("fun.tmp.20", Double),
                    ],
                    Var("fun.tmp.21", Int),
                ),
                Copy {
                    src: Var("fun.tmp.21", Int),
                    dst: Var("call2.20", Int),
                },
                JumpIfZero(
                    Var("call1.19", Int),
                    "fun.1.true",
                ),
                Return(
                    Var("call1.19", Int),
                ),
                Jump(
                    "fun.1.end",
                ),
                Label(
                    "fun.1.true",
                ),
                Label(
                    "fun.1.end",
                ),
                JumpIfZero(
                    Var("call2.20", Int),
                    "fun.2.true",
                ),
                Return(
                    Var("call2.20", Int),
                ),
                Jump(
                    "fun.2.end",
                ),
                Label(
                    "fun.2.true",
                ),
                Label(
                    "fun.2.end",
                ),
                Jump(
                    "fun.0.end",
                ),
                Label(
                    "fun.0.true",
                ),
                Label(
                    "fun.0.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("i1.1", Int),
                    rhs: 2,
                    dst: Var("fun.tmp.22", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("i2.3", Int),
                    rhs: Var("fun.tmp.22", Int),
                    dst: Var("fun.tmp.23", Int),
                },
                JumpIfZero(
                    Var("fun.tmp.23", Int),
                    "fun.3.true",
                ),
                Return(
                    2,
                ),
                Jump(
                    "fun.3.end",
                ),
                Label(
                    "fun.3.true",
                ),
                Label(
                    "fun.3.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("i1.1", Int),
                    rhs: 4,
                    dst: Var("fun.tmp.24", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("i3.5", Int),
                    rhs: Var("fun.tmp.24", Int),
                    dst: Var("fun.tmp.25", Int),
                },
                JumpIfZero(
                    Var("fun.tmp.25", Int),
                    "fun.4.true",
                ),
                Return(
                    3,
                ),
                Jump(
                    "fun.4.end",
                ),
                Label(
                    "fun.4.true",
                ),
                Label(
                    "fun.4.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("i1.1", Int),
                    rhs: 6,
                    dst: Var("fun.tmp.26", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("i4.7", Int),
                    rhs: Var("fun.tmp.26", Int),
                    dst: Var("fun.tmp.27", Int),
                },
                JumpIfZero(
                    Var("fun.tmp.27", Int),
                    "fun.5.true",
                ),
                Return(
                    4,
                ),
                Jump(
                    "fun.5.end",
                ),
                Label(
                    "fun.5.true",
                ),
                Label(
                    "fun.5.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("i1.1", Int),
                    rhs: 8,
                    dst: Var("fun.tmp.28", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("i5.9", Int),
                    rhs: Var("fun.tmp.28", Int),
                    dst: Var("fun.tmp.29", Int),
                },
                JumpIfZero(
                    Var("fun.tmp.29", Int),
                    "fun.6.true",
                ),
                Return(
                    5,
                ),
                Jump(
                    "fun.6.end",
                ),
                Label(
                    "fun.6.true",
                ),
                Label(
                    "fun.6.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("i1.1", Int),
                    rhs: 10,
                    dst: Var("fun.tmp.30", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("i6.11", Int),
                    rhs: Var("fun.tmp.30", Int),
                    dst: Var("fun.tmp.31", Int),
                },
                JumpIfZero(
                    Var("fun.tmp.31", Int),
                    "fun.7.true",
                ),
                Return(
                    6,
                ),
                Jump(
                    "fun.7.end",
                ),
                Label(
                    "fun.7.true",
                ),
                Label(
                    "fun.7.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("i1.1", Int),
                    rhs: 12,
                    dst: Var("fun.tmp.32", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("i7.13", Int),
                    rhs: Var("fun.tmp.32", Int),
                    dst: Var("fun.tmp.33", Int),
                },
                JumpIfZero(
                    Var("fun.tmp.33", Int),
                    "fun.8.true",
                ),
                Return(
                    7,
                ),
                Jump(
                    "fun.8.end",
                ),
                Label(
                    "fun.8.true",
                ),
                Label(
                    "fun.8.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("i1.1", Int),
                    rhs: 14,
                    dst: Var("fun.tmp.34", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("i8.15", Int),
                    rhs: Var("fun.tmp.34", Int),
                    dst: Var("fun.tmp.35", Int),
                },
                JumpIfZero(
                    Var("fun.tmp.35", Int),
                    "fun.9.true",
                ),
                Return(
                    8,
                ),
                Jump(
                    "fun.9.end",
                ),
                Label(
                    "fun.9.true",
                ),
                Label(
                    "fun.9.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("i1.1", Int),
                    rhs: 16,
                    dst: Var("fun.tmp.36", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("i9.17", Int),
                    rhs: Var("fun.tmp.36", Int),
                    dst: Var("fun.tmp.37", Int),
                },
                JumpIfZero(
                    Var("fun.tmp.37", Int),
                    "fun.10.true",
                ),
                Return(
                    9,
                ),
                Jump(
                    "fun.10.end",
                ),
                Label(
                    "fun.10.true",
                ),
                Label(
                    "fun.10.end",
                ),
                Binary {
                    op: Subtract,
                    lhs: Var("d9.18", Double),
                    rhs: 16.0,
                    dst: Var("fun.tmp.38", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d1.2", Double),
                    rhs: Var("fun.tmp.38", Double),
                    dst: Var("fun.tmp.39", Double),
                },
                JumpIfZero(
                    Var("fun.tmp.39", Double),
                    "fun.11.true",
                ),
                Return(
                    11,
                ),
                Jump(
                    "fun.11.end",
                ),
                Label(
                    "fun.11.true",
                ),
                Label(
                    "fun.11.end",
                ),
                Binary {
                    op: Subtract,
                    lhs: Var("d9.18", Double),
                    rhs: 14.0,
                    dst: Var("fun.tmp.40", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d2.4", Double),
                    rhs: Var("fun.tmp.40", Double),
                    dst: Var("fun.tmp.41", Double),
                },
                JumpIfZero(
                    Var("fun.tmp.41", Double),
                    "fun.12.true",
                ),
                Return(
                    12,
                ),
                Jump(
                    "fun.12.end",
                ),
                Label(
                    "fun.12.true",
                ),
                Label(
                    "fun.12.end",
                ),
                Binary {
                    op: Subtract,
                    lhs: Var("d9.18", Double),
                    rhs: 12.0,
                    dst: Var("fun.tmp.42", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d3.6", Double),
                    rhs: Var("fun.tmp.42", Double),
                    dst: Var("fun.tmp.43", Double),
                },
                JumpIfZero(
                    Var("fun.tmp.43", Double),
                    "fun.13.true",
                ),
                Return(
                    13,
                ),
                Jump(
                    "fun.13.end",
                ),
                Label(
                    "fun.13.true",
                ),
                Label(
                    "fun.13.end",
                ),
                Binary {
                    op: Subtract,
                    lhs: Var("d9.18", Double),
                    rhs: 10.0,
                    dst: Var("fun.tmp.44", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d4.8", Double),
                    rhs: Var("fun.tmp.44", Double),
                    dst: Var("fun.tmp.45", Double),
                },
                JumpIfZero(
                    Var("fun.tmp.45", Double),
                    "fun.14.true",
                ),
                Return(
                    14,
                ),
                Jump(
                    "fun.14.end",
                ),
                Label(
                    "fun.14.true",
                ),
                Label(
                    "fun.14.end",
                ),
                Binary {
                    op: Subtract,
                    lhs: Var("d9.18", Double),
                    rhs: 8.0,
                    dst: Var("fun.tmp.46", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d5.10", Double),
                    rhs: Var("fun.tmp.46", Double),
                    dst: Var("fun.tmp.47", Double),
                },
                JumpIfZero(
                    Var("fun.tmp.47", Double),
                    "fun.15.true",
                ),
                Return(
                    15,
                ),
                Jump(
                    "fun.15.end",
                ),
                Label(
                    "fun.15.true",
                ),
                Label(
                    "fun.15.end",
                ),
                Binary {
                    op: Subtract,
                    lhs: Var("d9.18", Double),
                    rhs: 6.0,
                    dst: Var("fun.tmp.48", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d6.12", Double),
                    rhs: Var("fun.tmp.48", Double),
                    dst: Var("fun.tmp.49", Double),
                },
                JumpIfZero(
                    Var("fun.tmp.49", Double),
                    "fun.16.true",
                ),
                Return(
                    16,
                ),
                Jump(
                    "fun.16.end",
                ),
                Label(
                    "fun.16.true",
                ),
                Label(
                    "fun.16.end",
                ),
                Binary {
                    op: Subtract,
                    lhs: Var("d9.18", Double),
                    rhs: 4.0,
                    dst: Var("fun.tmp.50", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d7.14", Double),
                    rhs: Var("fun.tmp.50", Double),
                    dst: Var("fun.tmp.51", Double),
                },
                JumpIfZero(
                    Var("fun.tmp.51", Double),
                    "fun.17.true",
                ),
                Return(
                    17,
                ),
                Jump(
                    "fun.17.end",
                ),
                Label(
                    "fun.17.true",
                ),
                Label(
                    "fun.17.end",
                ),
                Binary {
                    op: Subtract,
                    lhs: Var("d9.18", Double),
                    rhs: 2.0,
                    dst: Var("fun.tmp.52", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d8.16", Double),
                    rhs: Var("fun.tmp.52", Double),
                    dst: Var("fun.tmp.53", Double),
                },
                JumpIfZero(
                    Var("fun.tmp.53", Double),
                    "fun.18.true",
                ),
                Return(
                    18,
                ),
                Jump(
                    "fun.18.end",
                ),
                Label(
                    "fun.18.true",
                ),
                Label(
                    "fun.18.end",
                ),
                Return(
                    0,
                ),
                Return(
                    0,
                ),
            ],
        },
        Function {
            identifier: "main",
            global: true,
            params: [],
            instructions: [
                Call(
                    "fun",
                    [
                        1,
                        2.0,
                        3,
                        4.0,
                        5,
                        6.0,
                        7,
                        8.0,
                        9,
                        10.0,
                        11,
                        12.0,
                        13,
                        14.0,
                        15,
                        16.0,
                        17,
                        18.0,
                    ],
                    Var("main.tmp.0", Int),
                ),
                Return(
                    Var("main.tmp.0", Int),
                ),
                Return(
                    0,
                ),
            ],
        },
    ],
}