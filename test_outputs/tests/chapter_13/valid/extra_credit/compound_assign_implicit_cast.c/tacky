Program {
    static_variables: [],
    functions: [
        Function {
            identifier: "main",
            global: true,
            params: [],
            instructions: [
                Copy {
                    src: 1000.5,
                    dst: Var("d.1", Double),
                },
                Binary {
                    op: Add,
                    lhs: Var("d.1", Double),
                    rhs: 1000.0,
                    dst: Var("main.tmp.0", Double),
                },
                Copy {
                    src: Var("main.tmp.0", Double),
                    dst: Var("d.1", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d.1", Double),
                    rhs: 2000.5,
                    dst: Var("main.tmp.1", Double),
                },
                JumpIfZero(
                    Var("main.tmp.1", Double),
                    "main.0.true",
                ),
                Return(
                    1,
                ),
                Jump(
                    "main.0.end",
                ),
                Label(
                    "main.0.true",
                ),
                Label(
                    "main.0.end",
                ),
                Copy {
                    src: 18446744073709551586ul,
                    dst: Var("ul.2", ULong),
                },
                UIntToDouble {
                    src: Var("ul.2", ULong),
                    dst: Var("main.tmp.2", Double),
                },
                Binary {
                    op: Subtract,
                    lhs: Var("main.tmp.2", Double),
                    rhs: 1.5e19,
                    dst: Var("main.tmp.3", Double),
                },
                DoubleToUInt {
                    src: Var("main.tmp.3", Double),
                    dst: Var("main.tmp.4", ULong),
                },
                Copy {
                    src: Var("main.tmp.4", ULong),
                    dst: Var("ul.2", ULong),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("ul.2", ULong),
                    rhs: 3446744073709551616ul,
                    dst: Var("main.tmp.5", ULong),
                },
                JumpIfZero(
                    Var("main.tmp.5", ULong),
                    "main.1.true",
                ),
                Return(
                    2,
                ),
                Jump(
                    "main.1.end",
                ),
                Label(
                    "main.1.true",
                ),
                Label(
                    "main.1.end",
                ),
                Copy {
                    src: 10,
                    dst: Var("i.3", Int),
                },
                IntToDouble {
                    src: Var("i.3", Int),
                    dst: Var("main.tmp.6", Double),
                },
                Binary {
                    op: Add,
                    lhs: Var("main.tmp.6", Double),
                    rhs: 0.99999,
                    dst: Var("main.tmp.7", Double),
                },
                DoubleToInt {
                    src: Var("main.tmp.7", Double),
                    dst: Var("main.tmp.8", Int),
                },
                Copy {
                    src: Var("main.tmp.8", Int),
                    dst: Var("i.3", Int),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("i.3", Int),
                    rhs: 10,
                    dst: Var("main.tmp.9", Int),
                },
                JumpIfZero(
                    Var("main.tmp.9", Int),
                    "main.2.true",
                ),
                Return(
                    3,
                ),
                Jump(
                    "main.2.end",
                ),
                Label(
                    "main.2.true",
                ),
                Label(
                    "main.2.end",
                ),
                Return(
                    0,
                ),
                Return(
                    0,
                ),
            ],
        },
    ],
}