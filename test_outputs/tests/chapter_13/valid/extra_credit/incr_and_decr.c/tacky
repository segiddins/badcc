Program {
    static_variables: [
        StaticVariable {
            identifier: "d.1",
            global: false,
            init: 0.75,
            width: Eight,
        },
    ],
    functions: [
        Function {
            identifier: "main",
            global: true,
            params: [],
            instructions: [
                Copy {
                    src: Var("d.1", Double),
                    dst: Var("main.tmp.0", Double),
                },
                Binary {
                    op: Add,
                    lhs: Var("d.1", Double),
                    rhs: 1.0,
                    dst: Var("d.1", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("main.tmp.0", Double),
                    rhs: 0.75,
                    dst: Var("main.tmp.1", Double),
                },
                JumpIfZero(
                    Var("main.tmp.1", Double),
                    "main.0.true",
                ),
                Return(
                    1,
                ),
                Jump(
                    "main.0.end",
                ),
                Label(
                    "main.0.true",
                ),
                Label(
                    "main.0.end",
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var("d.1", Double),
                    rhs: 1.75,
                    dst: Var("main.tmp.2", Double),
                },
                JumpIfZero(
                    Var("main.tmp.2", Double),
                    "main.1.true",
                ),
                Return(
                    2,
                ),
                Jump(
                    "main.1.end",
                ),
                Label(
                    "main.1.true",
                ),
                Label(
                    "main.1.end",
                ),
                Unary {
                    op: Negate,
                    src: 100.2,
                    dst: Var("main.tmp.3", Double),
                },
                Copy {
                    src: Var("main.tmp.3", Double),
                    dst: Var("d.1", Double),
                },
                Binary {
                    op: Add,
                    lhs: Var("d.1", Double),
                    rhs: 1.0,
                    dst: Var("d.1", Double),
                },
                Unary {
                    op: Negate,
                    src: 99.2,
                    dst: Var("main.tmp.4", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d.1", Double),
                    rhs: Var("main.tmp.4", Double),
                    dst: Var("main.tmp.5", Double),
                },
                JumpIfZero(
                    Var("main.tmp.5", Double),
                    "main.2.true",
                ),
                Return(
                    3,
                ),
                Jump(
                    "main.2.end",
                ),
                Label(
                    "main.2.true",
                ),
                Label(
                    "main.2.end",
                ),
                Unary {
                    op: Negate,
                    src: 99.2,
                    dst: Var("main.tmp.6", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d.1", Double),
                    rhs: Var("main.tmp.6", Double),
                    dst: Var("main.tmp.7", Double),
                },
                JumpIfZero(
                    Var("main.tmp.7", Double),
                    "main.3.true",
                ),
                Return(
                    4,
                ),
                Jump(
                    "main.3.end",
                ),
                Label(
                    "main.3.true",
                ),
                Label(
                    "main.3.end",
                ),
                Copy {
                    src: Var("d.1", Double),
                    dst: Var("main.tmp.8", Double),
                },
                Binary {
                    op: Add,
                    lhs: Var("d.1", Double),
                    rhs: -1.0,
                    dst: Var("d.1", Double),
                },
                Unary {
                    op: Negate,
                    src: 99.2,
                    dst: Var("main.tmp.9", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("main.tmp.8", Double),
                    rhs: Var("main.tmp.9", Double),
                    dst: Var("main.tmp.10", Double),
                },
                JumpIfZero(
                    Var("main.tmp.10", Double),
                    "main.4.true",
                ),
                Return(
                    5,
                ),
                Jump(
                    "main.4.end",
                ),
                Label(
                    "main.4.true",
                ),
                Label(
                    "main.4.end",
                ),
                Unary {
                    op: Negate,
                    src: 100.2,
                    dst: Var("main.tmp.11", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d.1", Double),
                    rhs: Var("main.tmp.11", Double),
                    dst: Var("main.tmp.12", Double),
                },
                JumpIfZero(
                    Var("main.tmp.12", Double),
                    "main.5.true",
                ),
                Return(
                    6,
                ),
                Jump(
                    "main.5.end",
                ),
                Label(
                    "main.5.true",
                ),
                Label(
                    "main.5.end",
                ),
                Binary {
                    op: Add,
                    lhs: Var("d.1", Double),
                    rhs: -1.0,
                    dst: Var("d.1", Double),
                },
                Unary {
                    op: Negate,
                    src: 101.2,
                    dst: Var("main.tmp.13", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d.1", Double),
                    rhs: Var("main.tmp.13", Double),
                    dst: Var("main.tmp.14", Double),
                },
                JumpIfZero(
                    Var("main.tmp.14", Double),
                    "main.6.true",
                ),
                Return(
                    7,
                ),
                Jump(
                    "main.6.end",
                ),
                Label(
                    "main.6.true",
                ),
                Label(
                    "main.6.end",
                ),
                Unary {
                    op: Negate,
                    src: 101.2,
                    dst: Var("main.tmp.15", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d.1", Double),
                    rhs: Var("main.tmp.15", Double),
                    dst: Var("main.tmp.16", Double),
                },
                JumpIfZero(
                    Var("main.tmp.16", Double),
                    "main.7.true",
                ),
                Return(
                    8,
                ),
                Jump(
                    "main.7.end",
                ),
                Label(
                    "main.7.true",
                ),
                Label(
                    "main.7.end",
                ),
                Copy {
                    src: 1e-21,
                    dst: Var("d.1", Double),
                },
                Copy {
                    src: Var("d.1", Double),
                    dst: Var("main.tmp.17", Double),
                },
                Binary {
                    op: Add,
                    lhs: Var("d.1", Double),
                    rhs: 1.0,
                    dst: Var("d.1", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d.1", Double),
                    rhs: 1.0,
                    dst: Var("main.tmp.18", Double),
                },
                JumpIfZero(
                    Var("main.tmp.18", Double),
                    "main.8.true",
                ),
                Return(
                    9,
                ),
                Jump(
                    "main.8.end",
                ),
                Label(
                    "main.8.true",
                ),
                Label(
                    "main.8.end",
                ),
                Copy {
                    src: 1e21,
                    dst: Var("d.1", Double),
                },
                Copy {
                    src: Var("d.1", Double),
                    dst: Var("main.tmp.19", Double),
                },
                Binary {
                    op: Add,
                    lhs: Var("d.1", Double),
                    rhs: -1.0,
                    dst: Var("d.1", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("d.1", Double),
                    rhs: 1e21,
                    dst: Var("main.tmp.20", Double),
                },
                JumpIfZero(
                    Var("main.tmp.20", Double),
                    "main.9.true",
                ),
                Return(
                    10,
                ),
                Jump(
                    "main.9.end",
                ),
                Label(
                    "main.9.true",
                ),
                Label(
                    "main.9.end",
                ),
                Return(
                    0,
                ),
                Return(
                    0,
                ),
            ],
        },
    ],
}