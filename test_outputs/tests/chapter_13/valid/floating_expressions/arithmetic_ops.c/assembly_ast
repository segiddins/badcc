Program {
    definitions: [
        Function {
            name: "addition",
            global: true,
            instructions: [
                AllocateStack(
                    32,
                ),
                Move {
                    asm_type: Double,
                    source: Data("point_one", Eight),
                    destination: Register(XMM14, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Register(XMM14, Eight),
                    destination: Stack(16, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Stack(16, Eight),
                    destination: Register(XMM15, Eight),
                },
                Binary(
                    Double,
                    Add,
                    Data("point_two", Eight),
                    Register(XMM15, Eight),
                ),
                Move {
                    asm_type: Double,
                    source: Register(XMM15, Eight),
                    destination: Stack(16, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Immediate(4599075939470750516, Eight),
                    destination: Register(R10, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Register(R10, Eight),
                    destination: Register(XMM14, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Stack(16, Eight),
                    destination: Register(XMM15, Eight),
                },
                Cmp(
                    Double,
                    Register(XMM14, Eight),
                    Register(XMM15, Eight),
                ),
                Move {
                    asm_type: Quadword,
                    source: Immediate(0, Eight),
                    destination: Stack(24, Eight),
                },
                SetCC(
                    E,
                    Stack(24, Eight),
                ),
                Cvttsd2si {
                    dst_type: Longword,
                    src: Stack(24, Eight),
                    dst: Register(R11, Four),
                },
                Move {
                    asm_type: Longword,
                    source: Register(R11, Four),
                    destination: Stack(28, Four),
                },
                Move {
                    asm_type: Longword,
                    source: Stack(28, Four),
                    destination: Register(AX, Four),
                },
                Ret,
                Move {
                    asm_type: Longword,
                    source: Immediate(0, Four),
                    destination: Register(AX, Four),
                },
                Ret,
            ],
        },
        Function {
            name: "subtraction",
            global: true,
            instructions: [
                AllocateStack(
                    32,
                ),
                Move {
                    asm_type: Double,
                    source: Data("four", Eight),
                    destination: Register(XMM14, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Register(XMM14, Eight),
                    destination: Stack(16, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Stack(16, Eight),
                    destination: Register(XMM15, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Immediate(4607182418800017408, Eight),
                    destination: Register(R10, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Register(R10, Eight),
                    destination: Register(XMM14, Eight),
                },
                Binary(
                    Double,
                    Sub,
                    Register(XMM14, Eight),
                    Register(XMM15, Eight),
                ),
                Move {
                    asm_type: Double,
                    source: Register(XMM15, Eight),
                    destination: Stack(16, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Immediate(4613937818241073152, Eight),
                    destination: Register(R10, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Register(R10, Eight),
                    destination: Register(XMM14, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Stack(16, Eight),
                    destination: Register(XMM15, Eight),
                },
                Cmp(
                    Double,
                    Register(XMM14, Eight),
                    Register(XMM15, Eight),
                ),
                Move {
                    asm_type: Quadword,
                    source: Immediate(0, Eight),
                    destination: Stack(24, Eight),
                },
                SetCC(
                    E,
                    Stack(24, Eight),
                ),
                Cvttsd2si {
                    dst_type: Longword,
                    src: Stack(24, Eight),
                    dst: Register(R11, Four),
                },
                Move {
                    asm_type: Longword,
                    source: Register(R11, Four),
                    destination: Stack(28, Four),
                },
                Move {
                    asm_type: Longword,
                    source: Stack(28, Four),
                    destination: Register(AX, Four),
                },
                Ret,
                Move {
                    asm_type: Longword,
                    source: Immediate(0, Four),
                    destination: Register(AX, Four),
                },
                Ret,
            ],
        },
        Function {
            name: "multiplication",
            global: true,
            instructions: [
                AllocateStack(
                    32,
                ),
                Move {
                    asm_type: Quadword,
                    source: Immediate(4576918229304087675, Eight),
                    destination: Register(R10, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Register(R10, Eight),
                    destination: Stack(16, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Stack(16, Eight),
                    destination: Register(XMM15, Eight),
                },
                Binary(
                    Double,
                    Mult,
                    Data("point_three", Eight),
                    Register(XMM15, Eight),
                ),
                Move {
                    asm_type: Double,
                    source: Register(XMM15, Eight),
                    destination: Stack(16, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Immediate(4569063951553953530, Eight),
                    destination: Register(R10, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Register(R10, Eight),
                    destination: Register(XMM14, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Stack(16, Eight),
                    destination: Register(XMM15, Eight),
                },
                Cmp(
                    Double,
                    Register(XMM14, Eight),
                    Register(XMM15, Eight),
                ),
                Move {
                    asm_type: Quadword,
                    source: Immediate(0, Eight),
                    destination: Stack(24, Eight),
                },
                SetCC(
                    E,
                    Stack(24, Eight),
                ),
                Cvttsd2si {
                    dst_type: Longword,
                    src: Stack(24, Eight),
                    dst: Register(R11, Four),
                },
                Move {
                    asm_type: Longword,
                    source: Register(R11, Four),
                    destination: Stack(28, Four),
                },
                Move {
                    asm_type: Longword,
                    source: Stack(28, Four),
                    destination: Register(AX, Four),
                },
                Ret,
                Move {
                    asm_type: Longword,
                    source: Immediate(0, Four),
                    destination: Register(AX, Four),
                },
                Ret,
            ],
        },
        Function {
            name: "division",
            global: true,
            instructions: [
                AllocateStack(
                    32,
                ),
                Move {
                    asm_type: Quadword,
                    source: Immediate(4619567317775286272, Eight),
                    destination: Register(R10, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Register(R10, Eight),
                    destination: Register(AX, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Immediate(0, Eight),
                    destination: Register(DX, Eight),
                },
                Div(
                    Double,
                    Data("two", Eight),
                ),
                Move {
                    asm_type: Quadword,
                    source: Register(AX, Eight),
                    destination: Stack(16, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Immediate(4615063718147915776, Eight),
                    destination: Register(R10, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Register(R10, Eight),
                    destination: Register(XMM14, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Stack(16, Eight),
                    destination: Register(XMM15, Eight),
                },
                Cmp(
                    Double,
                    Register(XMM14, Eight),
                    Register(XMM15, Eight),
                ),
                Move {
                    asm_type: Quadword,
                    source: Immediate(0, Eight),
                    destination: Stack(24, Eight),
                },
                SetCC(
                    E,
                    Stack(24, Eight),
                ),
                Cvttsd2si {
                    dst_type: Longword,
                    src: Stack(24, Eight),
                    dst: Register(R11, Four),
                },
                Move {
                    asm_type: Longword,
                    source: Register(R11, Four),
                    destination: Stack(28, Four),
                },
                Move {
                    asm_type: Longword,
                    source: Stack(28, Four),
                    destination: Register(AX, Four),
                },
                Ret,
                Move {
                    asm_type: Longword,
                    source: Immediate(0, Four),
                    destination: Register(AX, Four),
                },
                Ret,
            ],
        },
        Function {
            name: "negation",
            global: true,
            instructions: [
                AllocateStack(
                    48,
                ),
                Move {
                    asm_type: Double,
                    source: Data("twelveE30", Eight),
                    destination: Register(XMM14, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Register(XMM14, Eight),
                    destination: Stack(16, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Immediate(-9223372036854775808, Eight),
                    destination: Register(R10, Eight),
                },
                Binary(
                    Quadword,
                    Xor,
                    Register(R10, Eight),
                    Stack(16, Eight),
                ),
                Move {
                    asm_type: Double,
                    source: Stack(16, Eight),
                    destination: Register(XMM14, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Register(XMM14, Eight),
                    destination: Stack(24, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Immediate(5071878651310008751, Eight),
                    destination: Register(R10, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Register(R10, Eight),
                    destination: Stack(32, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Stack(32, Eight),
                    destination: Register(XMM15, Eight),
                },
                Binary(
                    Double,
                    Add,
                    Stack(24, Eight),
                    Register(XMM15, Eight),
                ),
                Move {
                    asm_type: Double,
                    source: Register(XMM15, Eight),
                    destination: Stack(32, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Immediate(0, Eight),
                    destination: Register(R10, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Register(R10, Eight),
                    destination: Register(XMM14, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Stack(32, Eight),
                    destination: Register(XMM15, Eight),
                },
                Cmp(
                    Double,
                    Register(XMM14, Eight),
                    Register(XMM15, Eight),
                ),
                Move {
                    asm_type: Quadword,
                    source: Immediate(0, Eight),
                    destination: Stack(40, Eight),
                },
                SetCC(
                    E,
                    Stack(40, Eight),
                ),
                Cvttsd2si {
                    dst_type: Longword,
                    src: Stack(40, Eight),
                    dst: Register(R11, Four),
                },
                Move {
                    asm_type: Longword,
                    source: Register(R11, Four),
                    destination: Stack(44, Four),
                },
                Move {
                    asm_type: Longword,
                    source: Stack(44, Four),
                    destination: Register(AX, Four),
                },
                Ret,
                Move {
                    asm_type: Longword,
                    source: Immediate(0, Four),
                    destination: Register(AX, Four),
                },
                Ret,
            ],
        },
        Function {
            name: "complex_expression",
            global: true,
            instructions: [
                AllocateStack(
                    64,
                ),
                Move {
                    asm_type: Double,
                    source: Data("two", Eight),
                    destination: Register(XMM14, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Register(XMM14, Eight),
                    destination: Stack(16, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Stack(16, Eight),
                    destination: Register(XMM15, Eight),
                },
                Binary(
                    Double,
                    Add,
                    Data("three", Eight),
                    Register(XMM15, Eight),
                ),
                Move {
                    asm_type: Double,
                    source: Register(XMM15, Eight),
                    destination: Stack(16, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Immediate(4638672431819522048, Eight),
                    destination: Register(R10, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Register(R10, Eight),
                    destination: Stack(24, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Stack(24, Eight),
                    destination: Register(XMM15, Eight),
                },
                Binary(
                    Double,
                    Mult,
                    Data("four", Eight),
                    Register(XMM15, Eight),
                ),
                Move {
                    asm_type: Double,
                    source: Register(XMM15, Eight),
                    destination: Stack(24, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Stack(16, Eight),
                    destination: Register(XMM14, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Register(XMM14, Eight),
                    destination: Stack(32, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Stack(32, Eight),
                    destination: Register(XMM15, Eight),
                },
                Binary(
                    Double,
                    Sub,
                    Stack(24, Eight),
                    Register(XMM15, Eight),
                ),
                Move {
                    asm_type: Double,
                    source: Register(XMM15, Eight),
                    destination: Stack(32, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Stack(32, Eight),
                    destination: Register(XMM14, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Register(XMM14, Eight),
                    destination: Stack(40, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Immediate(4647591670144040960, Eight),
                    destination: Register(R10, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Register(R10, Eight),
                    destination: Stack(48, Eight),
                },
                Move {
                    asm_type: Quadword,
                    source: Immediate(-9223372036854775808, Eight),
                    destination: Register(R10, Eight),
                },
                Binary(
                    Quadword,
                    Xor,
                    Register(R10, Eight),
                    Stack(48, Eight),
                ),
                Move {
                    asm_type: Double,
                    source: Stack(48, Eight),
                    destination: Register(XMM14, Eight),
                },
                Move {
                    asm_type: Double,
                    source: Stack(40, Eight),
                    destination: Register(XMM15, Eight),
                },
                Cmp(
                    Double,
                    Register(XMM14, Eight),
                    Register(XMM15, Eight),
                ),
                Move {
                    asm_type: Quadword,
                    source: Immediate(0, Eight),
                    destination: Stack(56, Eight),
                },
                SetCC(
                    E,
                    Stack(56, Eight),
                ),
                Cvttsd2si {
                    dst_type: Longword,
                    src: Stack(56, Eight),
                    dst: Register(R11, Four),
                },
                Move {
                    asm_type: Longword,
                    source: Register(R11, Four),
                    destination: Stack(60, Four),
                },
                Move {
                    asm_type: Longword,
                    source: Stack(60, Four),
                    destination: Register(AX, Four),
                },
                Ret,
                Move {
                    asm_type: Longword,
                    source: Immediate(0, Four),
                    destination: Register(AX, Four),
                },
                Ret,
            ],
        },
        Function {
            name: "main",
            global: true,
            instructions: [
                AllocateStack(
                    64,
                ),
                Call(
                    "addition",
                ),
                Move {
                    asm_type: Longword,
                    source: Register(AX, Four),
                    destination: Stack(12, Four),
                },
                Cmp(
                    Longword,
                    Immediate(0, Four),
                    Stack(12, Four),
                ),
                Move {
                    asm_type: Longword,
                    source: Immediate(0, Four),
                    destination: Stack(16, Four),
                },
                SetCC(
                    E,
                    Stack(16, Four),
                ),
                Cmp(
                    Longword,
                    Immediate(0, Four),
                    Stack(16, Four),
                ),
                JmpCC(
                    E,
                    "main.0.true",
                ),
                Move {
                    asm_type: Longword,
                    source: Immediate(1, Four),
                    destination: Register(AX, Four),
                },
                Ret,
                Jmp(
                    "main.0.end",
                ),
                Label(
                    "main.0.true",
                ),
                Label(
                    "main.0.end",
                ),
                Call(
                    "subtraction",
                ),
                Move {
                    asm_type: Longword,
                    source: Register(AX, Four),
                    destination: Stack(20, Four),
                },
                Cmp(
                    Longword,
                    Immediate(0, Four),
                    Stack(20, Four),
                ),
                Move {
                    asm_type: Longword,
                    source: Immediate(0, Four),
                    destination: Stack(24, Four),
                },
                SetCC(
                    E,
                    Stack(24, Four),
                ),
                Cmp(
                    Longword,
                    Immediate(0, Four),
                    Stack(24, Four),
                ),
                JmpCC(
                    E,
                    "main.1.true",
                ),
                Move {
                    asm_type: Longword,
                    source: Immediate(2, Four),
                    destination: Register(AX, Four),
                },
                Ret,
                Jmp(
                    "main.1.end",
                ),
                Label(
                    "main.1.true",
                ),
                Label(
                    "main.1.end",
                ),
                Call(
                    "multiplication",
                ),
                Move {
                    asm_type: Longword,
                    source: Register(AX, Four),
                    destination: Stack(28, Four),
                },
                Cmp(
                    Longword,
                    Immediate(0, Four),
                    Stack(28, Four),
                ),
                Move {
                    asm_type: Longword,
                    source: Immediate(0, Four),
                    destination: Stack(32, Four),
                },
                SetCC(
                    E,
                    Stack(32, Four),
                ),
                Cmp(
                    Longword,
                    Immediate(0, Four),
                    Stack(32, Four),
                ),
                JmpCC(
                    E,
                    "main.2.true",
                ),
                Move {
                    asm_type: Longword,
                    source: Immediate(3, Four),
                    destination: Register(AX, Four),
                },
                Ret,
                Jmp(
                    "main.2.end",
                ),
                Label(
                    "main.2.true",
                ),
                Label(
                    "main.2.end",
                ),
                Call(
                    "division",
                ),
                Move {
                    asm_type: Longword,
                    source: Register(AX, Four),
                    destination: Stack(36, Four),
                },
                Cmp(
                    Longword,
                    Immediate(0, Four),
                    Stack(36, Four),
                ),
                Move {
                    asm_type: Longword,
                    source: Immediate(0, Four),
                    destination: Stack(40, Four),
                },
                SetCC(
                    E,
                    Stack(40, Four),
                ),
                Cmp(
                    Longword,
                    Immediate(0, Four),
                    Stack(40, Four),
                ),
                JmpCC(
                    E,
                    "main.3.true",
                ),
                Move {
                    asm_type: Longword,
                    source: Immediate(4, Four),
                    destination: Register(AX, Four),
                },
                Ret,
                Jmp(
                    "main.3.end",
                ),
                Label(
                    "main.3.true",
                ),
                Label(
                    "main.3.end",
                ),
                Call(
                    "negation",
                ),
                Move {
                    asm_type: Longword,
                    source: Register(AX, Four),
                    destination: Stack(44, Four),
                },
                Cmp(
                    Longword,
                    Immediate(0, Four),
                    Stack(44, Four),
                ),
                Move {
                    asm_type: Longword,
                    source: Immediate(0, Four),
                    destination: Stack(48, Four),
                },
                SetCC(
                    E,
                    Stack(48, Four),
                ),
                Cmp(
                    Longword,
                    Immediate(0, Four),
                    Stack(48, Four),
                ),
                JmpCC(
                    E,
                    "main.4.true",
                ),
                Move {
                    asm_type: Longword,
                    source: Immediate(5, Four),
                    destination: Register(AX, Four),
                },
                Ret,
                Jmp(
                    "main.4.end",
                ),
                Label(
                    "main.4.true",
                ),
                Label(
                    "main.4.end",
                ),
                Call(
                    "complex_expression",
                ),
                Move {
                    asm_type: Longword,
                    source: Register(AX, Four),
                    destination: Stack(52, Four),
                },
                Cmp(
                    Longword,
                    Immediate(0, Four),
                    Stack(52, Four),
                ),
                Move {
                    asm_type: Longword,
                    source: Immediate(0, Four),
                    destination: Stack(56, Four),
                },
                SetCC(
                    E,
                    Stack(56, Four),
                ),
                Cmp(
                    Longword,
                    Immediate(0, Four),
                    Stack(56, Four),
                ),
                JmpCC(
                    E,
                    "main.5.true",
                ),
                Move {
                    asm_type: Longword,
                    source: Immediate(5, Four),
                    destination: Register(AX, Four),
                },
                Ret,
                Jmp(
                    "main.5.end",
                ),
                Label(
                    "main.5.true",
                ),
                Label(
                    "main.5.end",
                ),
                Move {
                    asm_type: Longword,
                    source: Immediate(0, Four),
                    destination: Register(AX, Four),
                },
                Ret,
                Move {
                    asm_type: Longword,
                    source: Immediate(0, Four),
                    destination: Register(AX, Four),
                },
                Ret,
            ],
        },
    ],
    static_variables: [
        StaticVariable {
            global: true,
            name: "four",
            value: 4.0,
            alignment: 8,
        },
        StaticVariable {
            global: true,
            name: "point_one",
            value: 0.1,
            alignment: 8,
        },
        StaticVariable {
            global: true,
            name: "point_three",
            value: 0.3,
            alignment: 8,
        },
        StaticVariable {
            global: true,
            name: "point_two",
            value: 0.2,
            alignment: 8,
        },
        StaticVariable {
            global: true,
            name: "three",
            value: 3.0,
            alignment: 8,
        },
        StaticVariable {
            global: true,
            name: "twelveE30",
            value: 1.2e31,
            alignment: 8,
        },
        StaticVariable {
            global: true,
            name: "two",
            value: 2.0,
            alignment: 8,
        },
    ],
    static_constants: [],
}