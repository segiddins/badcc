Program {
    static_variables: [],
    functions: [
        Function {
            identifier: "check_arguments",
            global: true,
            params: [
                Var("a.1", Double),
                Var("b.2", Double),
                Var("c.3", Double),
                Var("d.4", Double),
                Var("e.5", Double),
                Var("f.6", Double),
                Var("g.7", Double),
                Var("h.8", Double),
            ],
            instructions: [
                Binary {
                    op: NotEqual,
                    lhs: Var("a.1", Double),
                    rhs: 1.0,
                    dst: Var("check_arguments.tmp.0", Double),
                },
                JumpIfZero(
                    Var("check_arguments.tmp.0", Double),
                    "check_arguments.0.true",
                ),
                Return(
                    1,
                ),
                Jump(
                    "check_arguments.0.end",
                ),
                Label(
                    "check_arguments.0.true",
                ),
                Label(
                    "check_arguments.0.end",
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var("b.2", Double),
                    rhs: 2.0,
                    dst: Var("check_arguments.tmp.1", Double),
                },
                JumpIfZero(
                    Var("check_arguments.tmp.1", Double),
                    "check_arguments.1.true",
                ),
                Return(
                    2,
                ),
                Jump(
                    "check_arguments.1.end",
                ),
                Label(
                    "check_arguments.1.true",
                ),
                Label(
                    "check_arguments.1.end",
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var("c.3", Double),
                    rhs: 3.0,
                    dst: Var("check_arguments.tmp.2", Double),
                },
                JumpIfZero(
                    Var("check_arguments.tmp.2", Double),
                    "check_arguments.2.true",
                ),
                Return(
                    3,
                ),
                Jump(
                    "check_arguments.2.end",
                ),
                Label(
                    "check_arguments.2.true",
                ),
                Label(
                    "check_arguments.2.end",
                ),
                Binary {
                    op: NotEqual,
                    lhs: Var("d.4", Double),
                    rhs: 4.0,
                    dst: Var("check_arguments.tmp.3", Double),
                },
                JumpIfZero(
                    Var("check_arguments.tmp.3", Double),
                    "check_arguments.3.true",
                ),
                Return(
                    4,
                ),
                Jump(
                    "check_arguments.3.end",
                ),
                Label(
                    "check_arguments.3.true",
                ),
                Label(
                    "check_arguments.3.end",
                ),
                Unary {
                    op: Negate,
                    src: 1.0,
                    dst: Var("check_arguments.tmp.4", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("e.5", Double),
                    rhs: Var("check_arguments.tmp.4", Double),
                    dst: Var("check_arguments.tmp.5", Double),
                },
                JumpIfZero(
                    Var("check_arguments.tmp.5", Double),
                    "check_arguments.4.true",
                ),
                Return(
                    5,
                ),
                Jump(
                    "check_arguments.4.end",
                ),
                Label(
                    "check_arguments.4.true",
                ),
                Label(
                    "check_arguments.4.end",
                ),
                Unary {
                    op: Negate,
                    src: 2.0,
                    dst: Var("check_arguments.tmp.6", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("f.6", Double),
                    rhs: Var("check_arguments.tmp.6", Double),
                    dst: Var("check_arguments.tmp.7", Double),
                },
                JumpIfZero(
                    Var("check_arguments.tmp.7", Double),
                    "check_arguments.5.true",
                ),
                Return(
                    6,
                ),
                Jump(
                    "check_arguments.5.end",
                ),
                Label(
                    "check_arguments.5.true",
                ),
                Label(
                    "check_arguments.5.end",
                ),
                Unary {
                    op: Negate,
                    src: 3.0,
                    dst: Var("check_arguments.tmp.8", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("g.7", Double),
                    rhs: Var("check_arguments.tmp.8", Double),
                    dst: Var("check_arguments.tmp.9", Double),
                },
                JumpIfZero(
                    Var("check_arguments.tmp.9", Double),
                    "check_arguments.6.true",
                ),
                Return(
                    7,
                ),
                Jump(
                    "check_arguments.6.end",
                ),
                Label(
                    "check_arguments.6.true",
                ),
                Label(
                    "check_arguments.6.end",
                ),
                Unary {
                    op: Negate,
                    src: 4.0,
                    dst: Var("check_arguments.tmp.10", Double),
                },
                Binary {
                    op: NotEqual,
                    lhs: Var("h.8", Double),
                    rhs: Var("check_arguments.tmp.10", Double),
                    dst: Var("check_arguments.tmp.11", Double),
                },
                JumpIfZero(
                    Var("check_arguments.tmp.11", Double),
                    "check_arguments.7.true",
                ),
                Return(
                    8,
                ),
                Jump(
                    "check_arguments.7.end",
                ),
                Label(
                    "check_arguments.7.true",
                ),
                Label(
                    "check_arguments.7.end",
                ),
                Return(
                    0,
                ),
                Return(
                    0,
                ),
            ],
        },
    ],
}