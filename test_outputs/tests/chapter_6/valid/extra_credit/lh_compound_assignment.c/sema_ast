Program {
    declarations: [
        FunctionDeclaration {
            identifier: "main",
            params: [],
            ret: Int,
            body: [
                VariableDeclaration {
                    name: "x.1",
                    ty: Int,
                    init: Constant {
                        constant: 10,
                    },
                },
                Expression(
                    Ternary {
                        cond: Assignment {
                            lhs: Var {
                                name: "x.1",
                            },
                            rhs: Binary {
                                op: Subtract,
                                lhs: Var {
                                    name: "x.1",
                                },
                                rhs: Constant {
                                    constant: 1,
                                },
                            },
                        },
                        if_true: Assignment {
                            lhs: Var {
                                name: "x.1",
                            },
                            rhs: Binary {
                                op: Divide,
                                lhs: Var {
                                    name: "x.1",
                                },
                                rhs: Constant {
                                    constant: 2,
                                },
                            },
                        },
                        if_false: Constant {
                            constant: 0,
                        },
                    },
                ),
                Return(
                    Binary {
                        op: Equals,
                        lhs: Var {
                            name: "x.1",
                        },
                        rhs: Constant {
                            constant: 4,
                        },
                    },
                ),
            ],
        },
    ],
}